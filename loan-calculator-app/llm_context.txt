--- File: .env.local ---
POSTGRES_URL="postgres://postgres:Iamroot!@localhost:5432/test"
JWT_SECRET="your-super-secret-and-long-jwt-key"

---

--- File: next.config.ts ---
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  output: 'standalone', // Add this line
};

export default nextConfig;

---

--- File: package.json ---
{
  "name": "loan-calculator-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "build:local": "env-cmd -f .env.local next build"
  },
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "i18next": "^25.2.1",
    "jsonwebtoken": "^9.0.2",
    "next": "15.3.4",
    "next-intl": "^4.1.0",
    "pg": "^8.16.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-i18next": "^15.5.3",
    "react-icons": "^5.5.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20",
    "@types/pg": "^8.15.4",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "env-cmd": "^10.1.0",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

---

--- File: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

---

--- File: messages/en.json ---
{
  "Auth": {
    "login": "Login",
    "signup": "Sign Up",
    "username": "Username",
    "password": "Password",
    "dontHaveAccount": "Don't have an account? Sign up",
    "alreadyHaveAccount": "Already have an account? Login",
    "loginError": "Invalid credentials",
    "signupIpError": "An account has already been created from this IP address.",
    "signupUsernameError": "Username already exists."
  },
  "Rooms": {
    "joinOrCreateRoom": "Join or Create a Room",
    "roomCode": "Room Code",
    "joinRoom": "Join Room",
    "or": "OR",
    "createRoom": "Create Room",
    "joinFailed": "Failed to join room",
    "createFailed": "Failed to create room",
    "roomCreated": "Room created with code: {code}",
    "copyFailed": "Failed to copy code",
    "logout": "Logout"
  },
  "Room": {
    "balanceTitle": "Balance",
    "newEntryTitle": "New Entry",
    "detailed": "Detailed",
    "amount": "Amount",
    "description": "Description",
    "addEntry": "Add Entry",
    "allEntries": "All Entries",
    "backToRoom": "Back to Room"
  }
}

---

--- File: messages/he.json ---
{
  "Auth": {
    "login": "התחברות",
    "signup": "הרשמה",
    "username": "שם משתמש",
    "password": "סיסמה",
    "dontHaveAccount": "אין לך חשבון? הירשם",
    "alreadyHaveAccount": "כבר יש לך חשבון? התחבר",
    "loginError": "פרטי התחברות שגויים",
    "signupIpError": "חשבון כבר נוצר מכתובת IP זו.",
    "signupUsernameError": "שם המשתמש כבר קיים."
  },
  "Rooms": {
    "joinOrCreateRoom": "הצטרף או צור חדר",
    "roomCode": "קוד חדר",
    "joinRoom": "הצטרף לחדר",
    "or": "או",
    "createRoom": "צור חדר",
    "joinFailed": "ההצטרפות לחדר נכשלה",
    "createFailed": "יצירת החדר נכשלה",
    "roomCreated": "החדר נוצר עם הקוד: {code}",
    "copyFailed": "העתקת הקוד נכשלה",
    "logout": "התנתקות"
  },
  "Room": {
    "balanceTitle": "מאזן",
    "newEntryTitle": "הוספת רשומה חדשה",
    "detailed": "פירוט",
    "amount": "סכום",
    "description": "תיאור",
    "addEntry": "הוסף רשומה",
    "allEntries": "כל הרשומות",
    "backToRoom": "חזור לחדר"
  }
}

---

--- File: messages/ru.json ---
{
  "Auth": {
    "login": "Войти",
    "signup": "Зарегистрироваться",
    "username": "Имя пользователя",
    "password": "Пароль",
    "dontHaveAccount": "Нет аккаунта? Зарегистрируйтесь",
    "alreadyHaveAccount": "Уже есть аккаунт? Войдите",
    "loginError": "Неверные учетные данные",
    "signupIpError": "С этого IP-адреса уже была создана учетная запись.",
    "signupUsernameError": "Имя пользователя уже существует."
  },
  "Rooms": {
    "joinOrCreateRoom": "Присоединиться или создать комнату",
    "roomCode": "Код комнаты",
    "joinRoom": "Присоединиться",
    "or": "ИЛИ",
    "createRoom": "Создать комнату",
    "joinFailed": "Не удалось присоединиться к комнате",
    "createFailed": "Не удалось создать комнату",
    "roomCreated": "Комната создана с кодом: {code}",
    "copyFailed": "Не удалось скопировать код",
    "logout": "Выйти"
  },
  "Room": {
    "balanceTitle": "Баланс",
    "newEntryTitle": "Новая запись",
    "detailed": "Подробно",
    "amount": "Сумма",
    "description": "Описание",
    "addEntry": "Добавить запись",
    "allEntries": "Все записи",
    "backToRoom": "Вернуться в комнату"
  }
}

---

--- File: src/app/globals.css ---
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
  --card: #ffffff;
  --card-border: #e5e7eb;
  --card-foreground: #171717;
  --primary: #3b82f6; /* blue-500 */
  --primary-hover: #2563eb; /* blue-600 */
  --primary-foreground: #ffffff;
  --secondary: #4ade80; /* green-500 */
  --secondary-hover: #16a34a; /* green-600 */
  --secondary-foreground: #ffffff;
  --muted: #f3f4f6; /* gray-100 */
  --muted-foreground: #6b7280; /* gray-500 */
  --input-bg: #ffffff;
  --input-border: #d1d5db; /* gray-300 */
  --danger: #ef4444; /* red-500 */
  --danger-hover: #dc2626; /* red-600 */
  --success: #22c55e; /* green-500 */
}

[data-theme='dark'] {
  --background: #0a0a0a;
  --foreground: #ededed;
  --card: #1f2937; /* gray-800 */
  --card-border: #4b5563; /* gray-600 */
  --card-foreground: #ededed;
  --primary: #60a5fa; /* blue-400 */
  --primary-hover: #3b82f6; /* blue-500 */
  --primary-foreground: #171717;
  --secondary: #4ade80; /* green-500 */
  --secondary-hover: #22c55e; /* green-600 */
  --secondary-foreground: #171717;
  --muted: #374151; /* gray-700 */
  --muted-foreground: #9ca3af; /* gray-400 */
  --input-bg: #374151; /* gray-700 */
  --input-border: #6b7280; /* gray-500 */
  --danger: #f87171; /* red-400 */
  --danger-hover: #ef4444; /* red-500 */
  --success: #4ade80; /* green-400 */
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

/* Custom scrollbar styles */
::-webkit-scrollbar {
  width: 8px;
}
::-webkit-scrollbar-track {
  background: transparent;
}
::-webkit-scrollbar-thumb {
  background: var(--card-border);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: var(--muted-foreground);
}


/* Animation Keyframes */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(8px); }
  to { opacity: 1; transform: translateY(0); }
}
@keyframes scaleIn {
  from { opacity: 0; transform: scale(0.97); }
  to { opacity: 1; transform: scale(1); }
}

.animate-fadeIn {
  animation: fadeIn 0.4s ease-out forwards;
}
.animate-scaleIn {
  animation: scaleIn 0.3s ease-out forwards;
}


/* --- Base Component Styles & Transitions --- */

/* Default transitions for smoother interactions */
button, a, input {
    transition: all 0.2s ease-in-out;
}

/* Input styles */
.themed-input {
    background-color: var(--input-bg);
    border: 1px solid var(--input-border);
    color: var(--foreground);
}
.themed-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary) 20%, transparent);
}

/* Button styles with enhanced hover effects */
.btn-primary, .btn-secondary, .btn-muted, .btn-danger {
  box-shadow: 0 1px 2px rgba(0,0,0,0.05);
}

.btn-primary {
    background-color: var(--primary);
    color: var(--primary-foreground);
}
.btn-primary:hover {
    background-color: var(--primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in srgb, var(--primary) 30%, transparent);
}

.btn-secondary {
    background-color: var(--secondary);
    color: var(--secondary-foreground);
}
.btn-secondary:hover {
    background-color: var(--secondary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in srgb, var(--secondary) 30%, transparent);
}

.btn-muted {
  background-color: var(--muted);
  color: var(--muted-foreground);
  border: 1px solid var(--card-border);
}
.btn-muted:hover {
  background-color: var(--card-border);
  border-color: var(--muted-foreground);
  transform: translateY(-1px);
}

.btn-danger {
    background-color: var(--danger);
    color: var(--primary-foreground);
}
.btn-danger:hover {
    background-color: var(--danger-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in srgb, var(--danger) 30%, transparent);
}

---

--- File: src/app/layout.tsx ---
// src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import IntlProvider from "@/components/IntlProvider";
import ThemeProvider from "@/components/ThemeProvider";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Loan Calculator",
  description: "A simple loan calculator app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html>
      <body className={inter.className}>
        <ThemeProvider>
          <IntlProvider>
            <main>{children}</main>
          </IntlProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}

---

--- File: src/app/page.tsx ---
"use client";

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import messages from '../../messages/en.json'; // Import messages to get keys

// Create a type for valid keys within the 'Auth' section of your translations
type AuthTranslationKey = keyof typeof messages.Auth;

export default function AuthPage() {
    const t = useTranslations('Auth');
    const [isLogin, setIsLogin] = useState(true);
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(true);
    const router = useRouter();

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            router.replace('/rooms');
        } else {
            setIsLoading(false);
        }
    }, [router]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');
        const endpoint = isLogin ? '/api/auth/login' : '/api/auth/signup';
        const res = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password }),
        });

        const data = await res.json();
        if (res.ok) {
            if (isLogin) {
                localStorage.setItem('token', data.token);
                router.push('/rooms');
            } else {
                setIsLogin(true);
            }
        } else {
            // Use the type-safe key for the translation function
            setError(t(data.message as AuthTranslationKey));
        }
    };

    if (isLoading) {
        return <div className="min-h-screen bg-muted" />;
    }

    return (
        <div className="min-h-screen bg-muted flex flex-col justify-center items-center">
            <div className="bg-card p-8 rounded-lg shadow-md w-full max-w-md border border-card-border">
                <h1 className="text-2xl font-bold mb-6 text-center text-card-foreground">{isLogin ? t('login') : t('signup')}</h1>
                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label className="block text-muted-foreground mb-2" htmlFor="username">{t('username')}</label>
                        <input
                            id="username"
                            type="text"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            className="w-full px-3 py-2 border rounded-lg themed-input"
                            required
                        />
                    </div>
                    <div className="mb-6">
                        <label className="block text-muted-foreground mb-2" htmlFor="password">{t('password')}</label>
                        <input
                            id="password"
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            className="w-full px-3 py-2 border rounded-lg themed-input"
                            required
                        />
                    </div>
                    {error && <p className="text-danger text-sm text-center mb-4">{error}</p>}
                    <button type="submit" className="w-full py-2 rounded-lg btn-primary">
                        {isLogin ? t('login') : t('signup')}
                    </button>
                </form>
                <button onClick={() => setIsLogin(!isLogin)} className="mt-4 text-center w-full text-sm text-primary hover:underline">
                    {isLogin ? t('dontHaveAccount') : t('alreadyHaveAccount')}
                </button>
            </div>
        </div>
    );
}

---

--- File: src/app/api/auth/login/route.ts ---
import { NextResponse } from 'next/server';
import { compare } from 'bcryptjs';
import { sign } from 'jsonwebtoken';
import { db } from '@/lib/db';
import { JWT_SECRET } from '@/lib/constants';

export async function POST(req: Request) {
    try {
        const { username, password } = await req.json();

        const response = await db.query('SELECT * FROM users WHERE username = $1', [username]);
        if (response.rows.length === 0) {
            return NextResponse.json({ message: 'loginError' }, { status: 401 });
        }

        const user = response.rows[0];
        const passwordMatch = await compare(password, user.password);

        if (!passwordMatch) {
            return NextResponse.json({ message: 'loginError' }, { status: 401 });
        }

        const token = sign({ userId: user.id, username: user.username }, JWT_SECRET!, { expiresIn: '365d' });

        return NextResponse.json({ token });
    } catch (error) {
        console.error(error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/auth/signup/route.ts ---
import { NextResponse } from 'next/server';
import { hash } from 'bcryptjs';
import { db } from '@/lib/db';

// Define a type for the potential Postgres error to make our catch block type-safe
interface PostgresError extends Error {
    code?: string;
    constraint?: string;
}

export async function POST(req: Request) {
    try {
        const { username, password } = await req.json();
        // Use x-forwarded-for header (set by Nginx/Caddy) or fall back to a default.
        const ip = req.headers.get('x-forwarded-for') ?? '127.0.0.1';

        const hashedPassword = await hash(password, 10);
        await db.query(
            'INSERT INTO users (username, password, last_ip) VALUES ($1, $2, $3)',
            [username, hashedPassword, ip]
        );

        return NextResponse.json({ message: 'User created successfully' }, { status: 201 });
    } catch (e: unknown) {
        const error = e as PostgresError;
        // Check for the specific duplicate username error from Postgres
        if (error.code === '23505' && error.constraint === 'users_username_key') {
            return NextResponse.json({ message: 'signupUsernameError' }, { status: 409 });
        }
        console.error(error);
        return NextResponse.json({ message: 'An error occurred during signup.' }, { status: 500 });
    }
}

---

--- File: src/app/api/entries/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

export async function POST(req: Request) {
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        const { roomId, amount, description } = await req.json();

        await db.query('INSERT INTO entries (room_id, user_id, amount, description) VALUES ($1, $2, $3, $4)', [roomId, user.userId, amount, description]);

        return NextResponse.json({ message: 'Entry added successfully' });
    } catch (error) {
        console.error(error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/rooms/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

// Define a type for the potential Postgres error to make our catch block type-safe
interface PostgresError extends Error {
    code?: string;
    constraint?: string;
}

export async function POST(req: Request) {
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        let body = {};
        // The request might not have a body for create room, so we handle that case.
        try {
            const text = await req.text();
            if (text) {
              body = JSON.parse(text);
            }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (_error) {
            // Ignore error if body is empty or invalid, which is expected when creating a room.
        }
        const { roomCode } = body as { roomCode?: string };


        if (roomCode) {
            // Join an existing room
            const roomResult = await db.query('SELECT id FROM rooms WHERE code = $1', [roomCode]);
            if (roomResult.rows.length === 0) {
                // Using i18n key for consistency
                return NextResponse.json({ message: 'joinFailed' }, { status: 404 });
            }
            const roomId = roomResult.rows[0].id;

            // Use ON CONFLICT to gracefully handle cases where the user is already a member.
            await db.query('INSERT INTO room_members (user_id, room_id) VALUES ($1, $2) ON CONFLICT (user_id, room_id) DO NOTHING', [user.userId, roomId]);

            return NextResponse.json({ roomId });
        } else {
            // Create a new room with retry logic to ensure the generated code is unique.
            const MAX_RETRIES = 5;
            for (let i = 0; i < MAX_RETRIES; i++) {
                // Generate a 6-character alphanumeric code.
                const newCode = Math.random().toString(36).substring(2, 8).toUpperCase();
                const client = await db.connect();
                try {
                    // Start a transaction
                    await client.query('BEGIN');

                    const roomResult = await client.query(
                        'INSERT INTO rooms (code, creator_id) VALUES ($1, $2) RETURNING id',
                        [newCode, user.userId]
                    );
                    const roomId = roomResult.rows[0].id;

                    // Add the creator as the first member of the new room.
                    await client.query(
                        'INSERT INTO room_members (user_id, room_id) VALUES ($1, $2)',
                        [user.userId, roomId]
                    );

                    // Commit the transaction
                    await client.query('COMMIT');

                    // Successfully created room, return the details.
                    return NextResponse.json({ roomId, code: newCode }, { status: 201 });
                } catch (e: unknown) {
                    // Rollback the transaction in case of an error
                    await client.query('ROLLBACK');

                    const error = e as PostgresError;
                    // Check if the error is a unique violation on the room code.
                    if (error.code === '23505' && error.constraint === 'rooms_code_key') {
                        console.warn(`Attempt ${i + 1}: Duplicate room code generated ('${newCode}'). Retrying...`);
                        // The loop will continue to the next iteration to try a new code.
                    } else {
                        // For any other database error, re-throw it to be caught by the outer handler.
                        throw error;
                    }
                } finally {
                    client.release();
                }
            }
            // If the loop completes without returning, it means we failed to generate a unique code.
            console.error(`Failed to create a room after ${MAX_RETRIES} attempts due to duplicate codes.`);
            return NextResponse.json({ message: 'createFailed' }, { status: 500 });
        }
    } catch (error) {
        console.error('An error occurred in /api/rooms:', error);
        // Generic error for the client. The details are logged on the server.
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/rooms/[roomId]/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

export async function GET(req: Request) {
    try {
        // Workaround for the Next.js 15.3.4 params issue:
        // Manually parse the roomId from the request URL.
        const url = new URL(req.url);
        const pathnameParts = url.pathname.split('/');
        const roomId = pathnameParts[pathnameParts.length - 1];

        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        // Check if the user is a member of the room
        const memberCheckResult = await db.query(
            'SELECT 1 FROM room_members WHERE room_id = $1 AND user_id = $2',
            [roomId, user.userId]
        );

        if (memberCheckResult.rows.length === 0) {
            // If user is not a member, deny access.
            // Returning 404 to not leak information about room existence.
            return NextResponse.json({ message: 'Room not found' }, { status: 404 });
        }
        
        const roomResult = await db.query('SELECT code FROM rooms WHERE id = $1', [roomId]);
        if (roomResult.rows.length === 0) {
            return NextResponse.json({ message: 'Room not found' }, { status: 404 });
        }
        const roomCode = roomResult.rows[0].code;

        const entriesResult = await db.query(
            'SELECT e.*, u.username FROM entries e JOIN users u ON e.user_id = u.id WHERE e.room_id = $1 ORDER BY e.created_at DESC',
            [roomId]
        );

        const membersResult = await db.query(
            'SELECT u.id, u.username FROM users u JOIN room_members rm ON u.id = rm.user_id WHERE rm.room_id = $1',
            [roomId]
        );

        if (membersResult.rows.length === 0) {
           return NextResponse.json({ message: 'No members in room or room does not exist' }, { status: 404 });
        }

        const userTotals: { [key: string]: number } = {};
        membersResult.rows.forEach(member => {
            userTotals[member.id] = 0;
        });

        entriesResult.rows.forEach(entry => {
            userTotals[entry.user_id] += parseFloat(entry.amount);
        });

        const totalAmount = entriesResult.rows.reduce((acc, entry) => acc + parseFloat(entry.amount), 0);
        const averageShare = totalAmount / membersResult.rows.length;

        const balances: { [key: string]: number } = {};
        membersResult.rows.forEach(member => {
            if (member.id !== user.userId) {
                balances[member.username] = (userTotals[member.id] || 0) - averageShare;
            }
        });

        const currentUserTotalPaid = userTotals[user.userId] || 0;
        const currentUserBalance = currentUserTotalPaid - averageShare;

        return NextResponse.json({
            code: roomCode,
            entries: entriesResult.rows,
            balances,
            currentUserBalance
        });
    } catch (error) {
        console.error(error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/rooms/[roomId]/members/route.ts ---
// src/app/api/rooms/[roomId]/members/route.ts
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

export async function DELETE(req: Request) {
    const client = await db.connect();
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        // Manually parse the roomId from the request URL.
        const url = new URL(req.url);
        const pathnameParts = url.pathname.split('/');
        // The path is /api/rooms/[roomId]/members, so roomId is the 3rd to last part
        const roomId = pathnameParts[pathnameParts.length - 2];

        if (!roomId || isNaN(parseInt(roomId, 10))) {
            return NextResponse.json({ message: 'Invalid Room ID' }, { status: 400 });
        }
        const numericRoomId = parseInt(roomId, 10);
        
        await client.query('BEGIN');

        // Remove the user from the room
        const deleteResult = await client.query(
            'DELETE FROM room_members WHERE user_id = $1 AND room_id = $2',
            [user.userId, numericRoomId]
        );

        if (deleteResult.rowCount === 0) {
            // The user wasn't a member of the room, so there's nothing to do.
            // We can consider this a successful state.
            await client.query('COMMIT');
            return NextResponse.json({ message: 'User already not in room' });
        }

        // Check if the user was the creator of the room. If so, nullify the creator_id.
        await client.query(
            'UPDATE rooms SET creator_id = NULL WHERE id = $1 AND creator_id = $2',
            [numericRoomId, user.userId]
        );

        // Check if there are any members left in the room
        const membersResult = await client.query(
            'SELECT 1 FROM room_members WHERE room_id = $1 LIMIT 1',
            [numericRoomId]
        );

        if (membersResult.rows.length === 0) {
            // If no members are left, delete the entire room.
            // Entries will be deleted automatically due to `ON DELETE CASCADE`.
            await client.query('DELETE FROM rooms WHERE id = $1', [numericRoomId]);
        }
        
        await client.query('COMMIT');
        
        return NextResponse.json({ message: 'Successfully left the room' });

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('Failed to leave room:', error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    } finally {
        client.release();
    }
}

---

--- File: src/app/api/user/rooms/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

export async function GET(req: Request) {
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        const roomsResult = await db.query(
            `SELECT r.id, r.code 
             FROM rooms r 
             JOIN room_members rm ON r.id = rm.room_id 
             WHERE rm.user_id = $1 
             ORDER BY r.id DESC`,
            [user.userId]
        );

        return NextResponse.json(roomsResult.rows);

    } catch (error) {
        console.error('Failed to fetch user rooms:', error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/rooms/layout.tsx ---
"use client";

import RoomsSidebar from '@/components/RoomsSidebar';
import { ReactNode, useState, useEffect } from 'react';
import { usePathname } from 'next/navigation';
import { FiMenu } from 'react-icons/fi';

export default function RoomsLayout({ children }: { children: ReactNode }) {
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const pathname = usePathname();

    // Close sidebar on route change for better mobile UX
    useEffect(() => {
        if (isSidebarOpen) {
            setIsSidebarOpen(false);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [pathname]);

    return (
        <div className="h-screen flex bg-background overflow-hidden">
            {/* Overlay for mobile, appears when sidebar is open */}
            {isSidebarOpen && (
                <div
                    className="fixed inset-0 bg-black/50 z-30 md:hidden"
                    onClick={() => setIsSidebarOpen(false)}
                    aria-hidden="true"
                />
            )}

            {/* Sidebar container. Handles mobile slide-in and static desktop display. */}
            <div
                className={`fixed top-0 left-0 h-full z-40 transform transition-transform duration-300 ease-in-out bg-background md:static md:translate-x-0 md:shrink-0 ${
                    isSidebarOpen ? "translate-x-0" : "-translate-x-full"
                }`}
            >
                <RoomsSidebar closeSidebar={() => setIsSidebarOpen(false)} />
            </div>
            
            <div className="flex-1 flex flex-col overflow-hidden">
                {/* Mobile-only header */}
                <header className="md:hidden flex items-center justify-start p-2 bg-card border-b border-card-border sticky top-0 z-10">
                    <button
                        onClick={() => setIsSidebarOpen(true)}
                        className="p-2 rounded-md text-foreground"
                        aria-label="Open menu"
                    >
                        <FiMenu size={24} />
                    </button>
                </header>
                
                {/* Main content area */}
                <main className="flex-1 bg-muted p-4 sm:p-6 md:p-8 overflow-y-auto">
                    {children}
                </main>
            </div>
        </div>
    );
}

---

--- File: src/app/rooms/page.tsx ---
"use client";

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';

interface Room {
    id: number;
    code: string;
}

export default function RoomsPage() {
    const t = useTranslations('Rooms');
    const router = useRouter();
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const checkRoomsAndRedirect = async () => {
            const token = localStorage.getItem('token');
            if (!token) {
                router.replace('/'); // Use replace to avoid back-button issues
                return;
            }

            try {
                const res = await fetch('/api/user/rooms', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (res.ok) {
                    const rooms: Room[] = await res.json();
                    if (rooms && rooms.length > 0) {
                        // Redirect to the most recent room
                        router.replace(`/rooms/${rooms[0].id}`);
                    } else {
                        // No rooms, so stop loading and show the welcome message
                        setIsLoading(false);
                    }
                } else if (res.status === 401) {
                    // Unauthorized, redirect to login
                    router.replace('/');
                } else {
                    // Handle other errors, stop loading to prevent infinite loop
                    setIsLoading(false);
                }
            } catch (error) {
                console.error("Failed to fetch rooms", error);
                setIsLoading(false); // Stop loading on network or other errors
            }
        };

        checkRoomsAndRedirect();
    }, [router]);

    if (isLoading) {
        return (
            <div className="w-full h-full flex items-center justify-center">
                <div className="text-center">
                    <p className="text-muted-foreground">Loading your rooms...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="w-full h-full flex items-center justify-center">
            <div className="text-center bg-card p-8 rounded-lg shadow-md border border-card-border max-w-md animate-scaleIn">
                <h1 className="text-2xl font-bold text-card-foreground">
                    {t('joinOrCreateRoom')}
                </h1>
                <p className="text-muted-foreground mt-2">
                    Select a room from the panel on the left or create a new one to get started.
                </p>
            </div>
        </div>
    );
}

---

--- File: src/app/rooms/[roomId]/page.tsx ---
"use client";

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { FiArrowDown } from 'react-icons/fi';

export default function RoomPage() {
    const params = useParams<{ roomId: string }>();
    const { roomId } = params;
    const t = useTranslations('Room');
    const [amount, setAmount] = useState('');
    const [description, setDescription] = useState('');
    const [balance, setBalance] = useState(0);
    const [detailedBalance, setDetailedBalance] = useState<{ [key: string]: number }>({});
    const [showDetails, setShowDetails] = useState(false);
    const [roomCode, setRoomCode] = useState('');
    const router = useRouter();

    const fetchData = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            router.push('/');
            return;
        }
        const res = await fetch(`/api/rooms/${roomId}`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        if (res.ok) {
            const { currentUserBalance, balances, code } = await res.json();
            setBalance(currentUserBalance || 0);
            setDetailedBalance(balances || {});
            setRoomCode(code || '');
        } else if (res.status === 401) {
            router.push('/');
        }
    }, [roomId, router]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const handleAddEntry = async (e: React.FormEvent) => {
        e.preventDefault();
        const token = localStorage.getItem('token');
        await fetch('/api/entries', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ roomId, amount: parseFloat(amount), description }),
        });
        setAmount('');
        setDescription('');
        fetchData(); // Refetch data
    };

    return (
        <div className="max-w-md mx-auto bg-card rounded-xl shadow-md overflow-hidden border border-card-border animate-scaleIn">
            <div className="p-8">
                <div className="text-center mb-6">
                    <h1 className="text-xl font-bold text-card-foreground">
                        Room #{roomCode}
                    </h1>
                </div>

                {/* Balance Section */}
                <div className="text-center mb-6">
                    <div className="text-lg font-medium text-muted-foreground">{t('balanceTitle')}</div>
                    <div className={`text-4xl font-bold mt-1 ${balance >= 0 ? 'text-success' : 'text-danger'}`}>
                        {balance.toFixed(2)} ILS
                    </div>
                     <button onClick={() => setShowDetails(!showDetails)} className="text-sm text-primary hover:underline flex items-center justify-center mx-auto mt-2">
                        {t('detailed')} <FiArrowDown className={`ms-1 transition-transform rtl:me-1 ${showDetails ? 'rotate-180' : ''}`} />
                    </button>
                    {showDetails && (
                        <div className="mt-2 text-left bg-muted p-3 rounded-lg animate-fadeIn">
                            {Object.entries(detailedBalance).map(([username, bal]) => (
                                <div key={username} className="flex justify-between text-card-foreground py-1">
                                    <span>{username}:</span>
                                    <span className={bal >= 0 ? 'text-success' : 'text-danger'}>{bal.toFixed(2)}</span>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                <div className="border-t border-card-border my-6"></div>

                {/* New Entry Form Section */}
                <div>
                    <h2 className="text-xl font-semibold text-center text-card-foreground mb-4">{t('newEntryTitle')}</h2>
                    <form onSubmit={handleAddEntry}>
                        <div className="mb-4">
                            <label className="block text-muted-foreground text-sm font-bold mb-2" htmlFor="amount">{t('amount')}</label>
                            <input
                                id="amount"
                                type="number"
                                value={amount}
                                onChange={(e) => setAmount(e.target.value)}
                                className="w-full px-3 py-2 leading-tight rounded-lg themed-input"
                                required
                            />
                        </div>
                        <div className="mb-6">
                            <label className="block text-muted-foreground text-sm font-bold mb-2" htmlFor="description">{t('description')}</label>
                            <input
                                id="description"
                                type="text"
                                value={description}
                                onChange={(e) => setDescription(e.target.value)}
                                className="w-full px-3 py-2 mb-3 leading-tight rounded-lg themed-input"
                                required
                            />
                        </div>
                        <div className="flex items-center justify-between">
                            <button type="submit" className="font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline btn-primary">
                                {t('addEntry')}
                            </button>
                            <button type="button" onClick={() => router.push(`/rooms/${roomId}/entries`)} className="font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline btn-muted">
                                {t('allEntries')}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}

---

--- File: src/app/rooms/[roomId]/entries/page.tsx ---
"use client";

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useTranslations } from 'next-intl';

interface Entry {
    id: number;
    amount: string;
    description: string;
    created_at: string;
    username: string;
}

export default function EntriesPage() {
    const params = useParams<{ roomId: string }>();
    const { roomId } = params;
    const t = useTranslations('Room');
    const [entries, setEntries] = useState<Entry[]>([]);
    const router = useRouter();

    const fetchEntries = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            router.push('/');
            return;
        }
        const res = await fetch(`/api/rooms/${roomId}`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        if (res.ok) {
            const { entries } = await res.json();
            setEntries(entries);
        } else if (res.status === 401) {
            router.push('/');
        }
    }, [roomId, router]);

    useEffect(() => {
        fetchEntries();
    }, [fetchEntries]);

    return (
        <div className="max-w-4xl mx-auto animate-scaleIn">
            <button onClick={() => router.back()} className="mb-4 font-bold py-2 px-4 rounded-lg btn-primary">
                {t('backToRoom')}
            </button>
            <div className="bg-card shadow-md rounded-lg border border-card-border">
                <div className="p-4 border-b border-card-border">
                    <h1 className="text-xl font-semibold text-card-foreground">{t('allEntries')}</h1>
                </div>
                <ul>
                    {entries.map((entry, index) => (
                        <li key={entry.id} className="p-4 border-b border-card-border flex justify-between items-center animate-fadeIn" style={{ animationDelay: `${index * 50}ms`, opacity: 0 }}>
                            <div>
                                <p className="font-semibold text-card-foreground">{entry.description}</p>
                                <p className="text-sm text-muted-foreground">
                                    {entry.username} - {new Date(entry.created_at).toLocaleString()}
                                </p>
                            </div>
                            <div className="text-lg font-bold text-card-foreground">
                                {entry.amount} ILS
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
}

---

--- File: src/components/ConfirmationDialog.tsx ---
// src/components/ConfirmationDialog.tsx
"use client";

import { ReactNode } from 'react';

interface ConfirmationDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  children: ReactNode;
}

export default function ConfirmationDialog({ isOpen, onClose, onConfirm, title, children }: ConfirmationDialogProps) {
  if (!isOpen) return null;

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/60"
      aria-labelledby="confirmation-dialog-title"
      role="dialog"
      aria-modal="true"
    >
      <div className="bg-background rounded-xl shadow-lg border border-card-border w-full max-w-md m-4 p-6 animate-scaleIn" role="document">
        <h2 id="confirmation-dialog-title" className="text-xl font-bold text-card-foreground mb-4">
          {title}
        </h2>
        <div className="text-muted-foreground mb-6">
          {children}
        </div>
        <div className="flex justify-end space-x-4 rtl:space-x-reverse">
          <button onClick={onClose} className="py-2 px-4 rounded-lg font-semibold btn-muted">
            Cancel
          </button>
          <button onClick={onConfirm} className="py-2 px-4 rounded-lg font-semibold btn-danger">
            Confirm
          </button>
        </div>
      </div>
    </div>
  );
}

---

--- File: src/components/IntlProvider.tsx ---
// src/components/IntlProvider.tsx
"use client";

import { NextIntlClientProvider } from "next-intl";
import { ReactNode, useEffect, useState, createContext, useContext, Dispatch, SetStateAction } from "react";

// Import all message files directly
import enMessages from '../../messages/en.json';
import heMessages from '../../messages/he.json';
import ruMessages from '../../messages/ru.json';

const messages = {
  en: enMessages,
  he: heMessages,
  ru: ruMessages,
};

type Messages = typeof enMessages;

// Create a context to share locale state and its setter
interface LocaleContextType {
  locale: string;
  setLocale: Dispatch<SetStateAction<string>>;
}
const LocaleContext = createContext<LocaleContextType | undefined>(undefined);

export default function IntlProvider({ children }: { children: ReactNode }) {
  const [locale, setLocale] = useState('en'); // Default to 'en'
  const [loadedMessages, setLoadedMessages] = useState<Messages>(messages.en);

  // On initial client-side render, load the locale from localStorage
  useEffect(() => {
    const storedLocale = localStorage.getItem('locale') || 'en';
    if (messages[storedLocale as keyof typeof messages]) {
      setLocale(storedLocale);
    }
  }, []);

  // When locale changes, update messages, localStorage, and document attributes
  useEffect(() => {
    if (messages[locale as keyof typeof messages]) {
      setLoadedMessages(messages[locale as keyof typeof messages]);
      localStorage.setItem('locale', locale);
      document.documentElement.lang = locale;
      document.documentElement.dir = locale === 'he' ? 'rtl' : 'ltr';
    }
  }, [locale]);

  return (
    <LocaleContext.Provider value={{ locale, setLocale }}>
      <NextIntlClientProvider
        locale={locale}
        messages={loadedMessages}
        timeZone="UTC" // Set a default timezone to prevent errors
      >
        {children}
      </NextIntlClientProvider>
    </LocaleContext.Provider>
  );
}

// Custom hook for components to easily access and change the locale
export function useLocale() {
  const context = useContext(LocaleContext);
  if (context === undefined) {
    throw new Error('useLocale must be used within an IntlProvider');
  }
  return context;
}

---

--- File: src/components/LanguageSwitcher.tsx ---
// src/components/LanguageSwitcher.tsx
"use client";

import { useState, useEffect, useRef } from 'react';
import { useLocale } from '@/components/IntlProvider';
import { FiGlobe, FiChevronDown } from 'react-icons/fi';

export default function LanguageSwitcher() {
    const { locale, setLocale } = useLocale();
    const [isOpen, setIsOpen] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);

    const languages = [
        { code: 'en', name: 'English' },
        { code: 'ru', name: 'Русский' },
        { code: 'he', name: 'עברית' },
    ];

    const currentLanguageName = languages.find(lang => lang.code === locale)?.name || 'Language';

    const handleLanguageChange = (langCode: string) => {
        setLocale(langCode);
        setIsOpen(false); // Close dropdown after selection
    };

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div className="fixed top-4 right-4 z-50" ref={dropdownRef}>
            <div className="relative">
                <button
                    onClick={() => setIsOpen(!isOpen)}
                    className="flex items-center space-x-2 bg-card border border-card-border rounded-md px-4 py-2 text-sm font-medium text-foreground hover:bg-muted focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                    <FiGlobe />
                    <span>{currentLanguageName}</span>
                    <FiChevronDown className={`transition-transform ms-1 ${isOpen ? 'rotate-180' : ''}`} />
                </button>

                {isOpen && (
                    <div
                        className="absolute right-0 mt-2 w-48 bg-card rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
                        role="menu"
                        aria-orientation="vertical"
                        aria-labelledby="menu-button"
                    >
                        <div className="py-1" role="none">
                            {languages.map(lang => (
                                <button
                                    key={lang.code}
                                    onClick={() => handleLanguageChange(lang.code)}
                                    className={`w-full text-left block px-4 py-2 text-sm ${
                                        locale === lang.code
                                            ? 'bg-primary text-primary-foreground'
                                            : 'text-foreground hover:bg-muted'
                                    }`}
                                    role="menuitem"
                                >
                                    {lang.name}
                                </button>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

---

--- File: src/components/RoomsSidebar.tsx ---
"use client";

import { useState, useEffect, useCallback } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { useTranslations } from 'next-intl';
import Link from 'next/link';
import { FiCopy, FiCheck, FiSun, FiMoon, FiGlobe, FiX, FiLogOut, FiXCircle } from 'react-icons/fi';
import { useTheme } from '@/components/ThemeProvider';
import { useLocale } from '@/components/IntlProvider';
import ConfirmationDialog from './ConfirmationDialog';

interface Room {
    id: number;
    code: string;
}

interface RoomsSidebarProps {
    closeSidebar: () => void;
}

export default function RoomsSidebar({ closeSidebar }: RoomsSidebarProps) {
    const t = useTranslations('Rooms');
    const router = useRouter();
    const pathname = usePathname();
    const [rooms, setRooms] = useState<Room[]>([]);
    const [roomCode, setRoomCode] = useState('');
    const [error, setError] = useState('');
    const [copiedCode, setCopiedCode] = useState<string | null>(null);
    const { theme, setTheme } = useTheme();
    const { locale, setLocale } = useLocale();

    // State for the leave room confirmation dialog
    const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);
    const [selectedRoomToLeave, setSelectedRoomToLeave] = useState<Room | null>(null);

    const fetchRooms = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            router.push('/');
            return;
        }
        const res = await fetch('/api/user/rooms', {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (res.ok) {
            const data = await res.json();
            setRooms(data);
        } else if (res.status === 401) {
            router.push('/');
        }
    }, [router]);

    useEffect(() => {
        fetchRooms();
    }, [fetchRooms, pathname]);

    const handleCopyToClipboard = (code: string) => {
        setError('');
        const fallbackCopy = (text: string) => {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.top = "0";
            textArea.style.left = "0";
            textArea.style.position = "fixed";
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    setCopiedCode(code);
                    setTimeout(() => setCopiedCode(null), 2000);
                } else {
                     setError(t('copyFailed'));
                }
            } catch (err) {
                console.error('Fallback: Oops, unable to copy', err);
                setError(t('copyFailed'));
            }
            document.body.removeChild(textArea);
        }

        if (!navigator.clipboard) {
            fallbackCopy(code);
            return;
        }
        navigator.clipboard.writeText(code).then(() => {
            setCopiedCode(code);
            setTimeout(() => setCopiedCode(null), 2000);
        }).catch(err => {
            console.error('Could not copy text: ', err);
            fallbackCopy(code);
        });
    };

    const handleJoinRoom = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');
        const token = localStorage.getItem('token');
        const res = await fetch('/api/rooms', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ roomCode }),
        });

        if (res.ok) {
            const { roomId } = await res.json();
            setRoomCode('');
            router.push(`/rooms/${roomId}`);
            closeSidebar();
        } else {
            const { message } = await res.json();
            console.error("Join failed:", message);
            setError(t('joinFailed'));
        }
    };

    const handleCreateRoom = async () => {
        setError('');
        const token = localStorage.getItem('token');
        const res = await fetch('/api/rooms', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({}),
        });

        if (res.ok) {
            const { roomId } = await res.json();
            router.push(`/rooms/${roomId}`);
            closeSidebar();
        } else {
            const { message } = await res.json();
            console.error("Create failed:", message);
            setError(t('createFailed'));
        }
    };

    const handleLogout = () => {
        localStorage.removeItem('token');
        router.push('/');
    };
    
    const openLeaveDialog = (room: Room) => {
        setSelectedRoomToLeave(room);
        setIsLeaveDialogOpen(true);
    };

    const handleLeaveRoom = async () => {
        if (!selectedRoomToLeave) return;

        setError('');
        const token = localStorage.getItem('token');
        const res = await fetch(`/api/rooms/${selectedRoomToLeave.id}/members`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`,
            },
        });

        if (res.ok) {
            setIsLeaveDialogOpen(false);
            // If the user is currently in the room they just left, navigate to the base rooms page.
            if (pathname.includes(`/rooms/${selectedRoomToLeave.id}`)) {
                router.push('/rooms');
            }
            fetchRooms(); // Refresh the room list
        } else {
            const { message } = await res.json();
            setError(message || 'Failed to leave room.');
            setIsLeaveDialogOpen(false);
        }
        setSelectedRoomToLeave(null);
    };

    const toggleTheme = () => {
        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
    };
    
    const cycleLanguage = () => {
        const languages = ['en', 'ru', 'he'];
        const currentIndex = languages.indexOf(locale);
        const nextIndex = (currentIndex + 1) % languages.length;
        setLocale(languages[nextIndex]);
    }

    return (
        <>
            <aside className="w-80 bg-card border-e border-card-border h-full p-4 flex flex-col">
                <div className="flex items-center justify-between mb-6 px-2">
                    <h2 className="text-2xl font-bold text-card-foreground">My Rooms</h2>
                    <button onClick={closeSidebar} className="md:hidden p-1 rounded-md hover:bg-muted text-muted-foreground">
                        <FiX size={24} />
                    </button>
                </div>

                <nav className="flex-grow overflow-y-auto -mx-2 pr-1 animate-fadeIn">
                    <ul>
                        {rooms.map((room, index) => {
                            const isActive = pathname === `/rooms/${room.id}` || pathname.startsWith(`/rooms/${room.id}/`);
                            return (
                                <li key={room.id} style={{ animationDelay: `${index * 50}ms`, opacity: 0 }} className="animate-fadeIn px-2">
                                    <div className={`group flex items-center justify-between rounded-lg transition-colors mb-2 ${isActive ? 'bg-primary text-primary-foreground' : 'text-card-foreground hover:bg-muted'}`}>
                                        <Link href={`/rooms/${room.id}`} className="flex-grow p-3 text-sm font-semibold truncate">
                                            Room #{room.code}
                                        </Link>
                                        <div className="flex items-center">
                                            <button
                                                onClick={() => handleCopyToClipboard(room.code)}
                                                className={`p-3 rounded-lg transition-all duration-200 ${isActive ? 'hover:bg-primary-hover' : 'hover:bg-card-border'} opacity-50 group-hover:opacity-100`}
                                                title="Copy room code" >
                                                {copiedCode === room.code 
                                                    ? <FiCheck className="text-success animate-scaleIn" /> 
                                                    : <FiCopy className="group-hover:scale-110 transition-transform" />
                                                }
                                            </button>
                                            <button
                                                onClick={() => openLeaveDialog(room)}
                                                className={`p-3 rounded-lg transition-all duration-200 ${isActive ? 'hover:bg-primary-hover' : 'hover:bg-card-border'} opacity-50 group-hover:opacity-100`}
                                                title="Leave room" >
                                                <FiXCircle className="group-hover:scale-110 transition-transform text-danger" />
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            );
                        })}
                    </ul>
                </nav>

                <div className="mt-auto pt-4 border-t border-card-border">
                    {error && <p className="text-danger text-sm text-center mb-2">{error}</p>}
                    
                    <form onSubmit={handleJoinRoom} className="mb-4">
                        <input
                            type="text"
                            placeholder={t('roomCode')}
                            value={roomCode}
                            onChange={(e) => setRoomCode(e.target.value)}
                            className="w-full px-3 py-2 rounded-lg mb-2 themed-input"
                        />
                        <button type="submit" className="w-full py-2 rounded-lg btn-primary">
                            {t('joinRoom')}
                        </button>
                    </form>

                    <div className="flex items-center my-2">
                        <div className="flex-grow border-t border-card-border"></div>
                        <span className="flex-shrink mx-2 text-xs text-muted-foreground">{t('or')}</span>
                        <div className="flex-grow border-t border-card-border"></div>
                    </div>
                    
                    <button onClick={handleCreateRoom} className="w-full py-2 rounded-lg btn-secondary mb-4">
                        {t('createRoom')}
                    </button>

                    <div className="space-y-2">
                        <button
                            onClick={handleLogout}
                            className="w-full py-2 px-4 flex items-center justify-center rounded-lg btn-muted"
                            aria-label="Logout"
                        >
                            <FiLogOut size={16} className="me-2"/>
                            <span className="font-semibold text-xs">{t('logout')}</span>
                        </button>

                        <div className="flex items-center justify-center space-x-2">
                             <button
                                onClick={toggleTheme}
                                className="flex items-center justify-center w-full p-2 rounded-md btn-muted"
                                aria-label="Toggle theme" >
                                {theme === 'light' ? <FiMoon size={16} /> : <FiSun size={16} />}
                            </button>
                             <button
                                onClick={cycleLanguage}
                                className="flex items-center justify-center w-full p-2 rounded-md btn-muted"
                                aria-label="Change language" >
                                <FiGlobe size={16} className="me-1.5"/>
                                <span className="font-semibold text-xs">{locale.toUpperCase()}</span>
                            </button>
                        </div>
                    </div>
                </div>
            </aside>

            <ConfirmationDialog
                isOpen={isLeaveDialogOpen}
                onClose={() => setIsLeaveDialogOpen(false)}
                onConfirm={handleLeaveRoom}
                title="Leave Room"
            >
                Are you sure you want to leave Room #{selectedRoomToLeave?.code}? 
                This action cannot be undone. You will need to join again using the room code.
            </ConfirmationDialog>
        </>
    );
}

---

--- File: src/components/ThemeProvider.tsx ---
// src/components/ThemeProvider.tsx
"use client";

import { createContext, useContext, useEffect, useState, ReactNode, Dispatch, SetStateAction } from 'react';

type Theme = "light" | "dark";

interface ThemeContextType {
  theme: Theme;
  setTheme: Dispatch<SetStateAction<Theme>>;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export default function ThemeProvider({ children }: { children: ReactNode }) {
  const [theme, setTheme] = useState<Theme>('light'); // Default to 'light'

  useEffect(() => {
    const storedTheme = localStorage.getItem('theme') as Theme | null;
    if (storedTheme) {
      setTheme(storedTheme);
    }
  }, []);

  useEffect(() => {
    if (theme) {
      localStorage.setItem('theme', theme);
      document.documentElement.setAttribute('data-theme', theme);
    }
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

---

--- File: src/components/ThemeSwitcher.tsx ---
// src/components/ThemeSwitcher.tsx
"use client";

import { useTheme } from '@/components/ThemeProvider';
import { FiSun, FiMoon } from 'react-icons/fi';

export default function ThemeSwitcher() {
    const { theme, setTheme } = useTheme();

    const toggleTheme = () => {
        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
    };

    return (
        <div className="fixed top-4 left-4 z-50">
            <button
                onClick={toggleTheme}
                className="flex items-center justify-center w-12 h-12 bg-card border border-card-border rounded-md text-foreground hover:bg-muted focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                aria-label="Toggle theme"
            >
                {theme === 'light' ? <FiMoon size={20} /> : <FiSun size={20} />}
            </button>
        </div>
    );
}

---

--- File: src/lib/auth.ts ---
import { verify } from 'jsonwebtoken';
import { JWT_SECRET } from './constants';

interface UserPayload {
    userId: number;
    username: string;
}

export function verifyToken(token: string | undefined): UserPayload | null {
    if (!token) {
        return null;
    }
    try {
        const decoded = verify(token, JWT_SECRET!) as UserPayload;
        return decoded;
    } catch { // The unused 'error' variable is removed here
        return null;
    }
}

---

--- File: src/lib/constants.ts ---
export const POSTGRES_URL = process.env.POSTGRES_URL;
export const JWT_SECRET = process.env.JWT_SECRET;

---

--- File: src/lib/db.ts ---
import { Pool } from 'pg';
import { POSTGRES_URL } from './constants';

export const db = new Pool({
    connectionString: POSTGRES_URL,
});

---

