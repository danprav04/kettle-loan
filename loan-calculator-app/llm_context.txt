--- File: .env.local ---
POSTGRES_URL="postgres://postgres:Iamroot!@localhost:5432/test"
JWT_SECRET="your-super-secret-and-long-jwt-key"

---

--- File: dstabse-schema.sql ---
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    last_ip VARCHAR(255)
);

CREATE TABLE rooms (
    id SERIAL PRIMARY KEY,
    code VARCHAR(6) UNIQUE NOT NULL,
    -- If the creator's user account is deleted, we set this to NULL
    -- rather than deleting the whole room.
    creator_id INTEGER REFERENCES users(id) ON DELETE SET NULL
);

CREATE TABLE room_members (
    id SERIAL PRIMARY KEY,
    -- If a user is deleted, remove them from all rooms.
    -- If a room is deleted, remove all members from it.
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    room_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE,
    UNIQUE(user_id, room_id)
);

CREATE TABLE entries (
    id SERIAL PRIMARY KEY,
    -- If a room is deleted, all its financial entries are also deleted.
    room_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE,
    -- If a user is deleted, their financial entries are also deleted.
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    amount NUMERIC(10, 2) NOT NULL,
    description VARCHAR(255) NOT NULL,
    -- This column stores an array of user IDs with whom an expense is shared.
    split_with_user_ids JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

---

--- File: next.config.ts ---
// types/next-pwa.d.ts
declare module 'next-pwa' {
  import { NextConfig } from 'next';

  // Define the options for next-pwa based on its documentation
  interface PWAConfig {
    dest?: string;
    register?: boolean;
    skipWaiting?: boolean;
    disable?: boolean;
    sw?: string;
    // Add other next-pwa options here as you use them
  }

  // Define the function signature for the default export
  function withPWA(config: PWAConfig): (nextConfig: NextConfig) => NextConfig;

  export = withPWA;
}

---

--- File: package.json ---
{
  "name": "loan-calculator-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "build:local": "env-cmd -f .env.local next build"
  },
  "dependencies": {
    "@mdi/js": "^7.4.47",
    "@mdi/react": "^1.6.1",
    "bcryptjs": "^3.0.2",
    "i18next": "^25.2.1",
    "idb": "^8.0.0",
    "jsonwebtoken": "^9.0.2",
    "next": "15.3.4",
    "next-intl": "^4.1.0",
    "next-pwa": "^5.6.0",
    "pg": "^8.16.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-i18next": "^15.5.3",
    "react-icons": "^5.5.0"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20",
    "@types/pg": "^8.15.4",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.19",
    "env-cmd": "^10.1.0",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "typescript": "^5"
  }
}

---

--- File: postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

---

--- File: tailwind.config.ts ---
import type { Config } from 'tailwindcss'

const config: Config = {
  darkMode: ['class', '[data-theme="dark"]'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        background: 'var(--background)',
        foreground: 'var(--foreground)',
        'card': 'var(--card)',
        'card-border': 'var(--card-border)',
        'card-foreground': 'var(--card-foreground)',
        primary: 'var(--primary)',
        'primary-hover': 'var(--primary-hover)',
        'primary-foreground': 'var(--primary-foreground)',
        secondary: 'var(--secondary)',
        'secondary-hover': 'var(--secondary-hover)',
        'secondary-foreground': 'var(--secondary-foreground)',
        muted: 'var(--muted)',
        'muted-foreground': 'var(--muted-foreground)',
        'input-bg': 'var(--input-bg)',
        'input-border': 'var(--input-border)',
        danger: 'var(--danger)',
        'danger-hover': 'var(--danger-hover)',
        success: 'var(--success)',
      },
    },
  },
  plugins: [],
}
export default config

---

--- File: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

---

--- File: messages/en.json ---
{
  "Auth": {
    "login": "Login",
    "signup": "Sign Up",
    "username": "Username",
    "password": "Password",
    "dontHaveAccount": "Don't have an account? Sign up",
    "alreadyHaveAccount": "Already have an account? Login",
    "loginError": "Invalid credentials",
    "signupIpError": "An account has already been created from this IP address.",
    "signupUsernameError": "Username already exists."
  },
  "Rooms": {
    "joinOrCreateRoom": "Join or Create a Room",
    "roomCode": "Room Code",
    "joinRoom": "Join Room",
    "or": "OR",
    "createRoom": "Create Room",
    "joinFailed": "Failed to join room",
    "createFailed": "Failed to create room",
    "roomCreated": "Room created with code: {code}",
    "copyFailed": "Failed to copy code",
    "logout": "Logout",
    "loadingRooms": "Loading your rooms...",
    "selectOrCreateRoomPrompt": "Select a room from the panel on the left or create a new one to get started.",
    "myRooms": "My Rooms",
    "copyRoomCode": "Copy room code",
    "leaveRoom": "Leave room",
    "leaveRoomTitle": "Leave Room",
    "leaveRoomConfirmation": "Are you sure you want to leave Room #{code}? This action cannot be undone. You will need to join again using the room code.",
    "leaveRoomFailed": "Failed to leave room."
  },
  "Room": {
    "balanceTitle": "Balance",
    "newEntryTitle": "New Entry",
    "simplifiedNewEntryTitle": "Log a New Loan",
    "detailed": "Detailed",
    "amount": "Amount",
    "description": "Description",
    "addEntry": "Add Entry",
    "allEntries": "All Entries",
    "backToRoom": "Back to Room",
    "expense": "I Pay",
    "loan": "I Owe",
    "splitEqually": "This cost will be split equally among all members.",
    "oweFullAmount": "You will owe the full amount to the group.",
    "roomTitle": "Room #{code}",
    "splitWith": "Share cost with:",
    "everyone": "Everyone",
    "shareWithMe": "Share with me"
  },
  "Dialog": {
    "cancel": "Cancel",
    "confirm": "Confirm"
  },
  "Accessibility": {
    "toggleTheme": "Toggle theme",
    "changeLanguage": "Change language",
    "toggleSimplifiedLayout": "Toggle simplified Kettle Mode"
  }
}

---

--- File: messages/he.json ---
{
  "Auth": {
    "login": "התחברות",
    "signup": "הרשמה",
    "username": "שם משתמש",
    "password": "סיסמה",
    "dontHaveAccount": "אין לך חשבון? הירשם",
    "alreadyHaveAccount": "כבר יש לך חשבון? התחבר",
    "loginError": "פרטי התחברות שגויים",
    "signupIpError": "חשבון כבר נוצר מכתובת IP זו.",
    "signupUsernameError": "שם המשתמש כבר קיים."
  },
  "Rooms": {
    "joinOrCreateRoom": "הצטרף או צור חדר",
    "roomCode": "קוד חדר",
    "joinRoom": "הצטרף לחדר",
    "or": "או",
    "createRoom": "צור חדר",
    "joinFailed": "ההצטרפות לחדר נכשלה",
    "createFailed": "יצירת החדר נכשלה",
    "roomCreated": "החדר נוצר עם הקוד: {code}",
    "copyFailed": "העתקת הקוד נכשלה",
    "logout": "התנתקות",
    "loadingRooms": "טוען את החדרים שלך...",
    "selectOrCreateRoomPrompt": "בחר חדר מהחלונית בצד שמאל או צור חדר חדש כדי להתחיל.",
    "myRooms": "החדרים שלי",
    "copyRoomCode": "העתק קוד חדר",
    "leaveRoom": "עזוב חדר",
    "leaveRoomTitle": "עזיבת חדר",
    "leaveRoomConfirmation": "האם אתה בטוח שברצונך לעזוב את חדר #{code}? לא ניתן לבטל פעולה זו. תצטרך להצטרף מחדש באמצעות קוד החדר.",
    "leaveRoomFailed": "עזיבת החדר נכשלה."
  },
  "Room": {
    "balanceTitle": "מאזן",
    "newEntryTitle": "הוספת רשומה חדשה",
    "simplifiedNewEntryTitle": "רישום הלוואה חדשה",
    "detailed": "פירוט",
    "amount": "סכום",
    "description": "תיאור",
    "addEntry": "הוסף רשומה",
    "allEntries": "כל הרשומות",
    "backToRoom": "חזור לחדר",
    "expense": "אני משלם",
    "loan": "אני חייב",
    "splitEqually": "העלות תחולק באופן שווה בין כל חברי החדר.",
    "oweFullAmount": "אתה תחוב את הסכום המלא לקבוצה.",
    "roomTitle": "חדר #{code}",
    "splitWith": "חלק את העלות עם:",
    "everyone": "כולם",
    "shareWithMe": "שתף איתי"
  },
  "Dialog": {
    "cancel": "ביטול",
    "confirm": "אישור"
  },
  "Accessibility": {
    "toggleTheme": "שנה ערכת נושא",
    "changeLanguage": "שנה שפה",
    "toggleSimplifiedLayout": "החלף מצב קומקום פשוט"
  }
}

---

--- File: messages/ru.json ---
{
  "Auth": {
    "login": "Войти",
    "signup": "Зарегистрироваться",
    "username": "Имя пользователя",
    "password": "Пароль",
    "dontHaveAccount": "Нет аккаунта? Зарегистрируйтесь",
    "alreadyHaveAccount": "Уже есть аккаунт? Войдите",
    "loginError": "Неверные учетные данные",
    "signupIpError": "С этого IP-адреса уже была создана учетная запись.",
    "signupUsernameError": "Имя пользователя уже существует."
  },
  "Rooms": {
    "joinOrCreateRoom": "Присоединиться или создать комнату",
    "roomCode": "Код комнаты",
    "joinRoom": "Присоединиться",
    "or": "ИЛИ",
    "createRoom": "Создать комнату",
    "joinFailed": "Не удалось присоединиться к комнате",
    "createFailed": "Не удалось создать комнату",
    "roomCreated": "Комната создана с кодом: {code}",
    "copyFailed": "Не удалось скопировать код",
    "logout": "Выйти",
    "loadingRooms": "Загрузка ваших комнат...",
    "selectOrCreateRoomPrompt": "Выберите комнату из панели слева или создайте новую, чтобы начать.",
    "myRooms": "Мои комнаты",
    "copyRoomCode": "Скопировать код комнаты",
    "leaveRoom": "Покинуть комнату",
    "leaveRoomTitle": "Покинуть комнату",
    "leaveRoomConfirmation": "Вы уверены, что хотите покинуть комнату #{code}? Это действие необратимо. Вам нужно будет снова присоединиться, используя код комнаты.",
    "leaveRoomFailed": "Не удалось покинуть комнату."
  },
  "Room": {
    "balanceTitle": "Баланс",
    "newEntryTitle": "Новая запись",
    "simplifiedNewEntryTitle": "Записать новый долг",
    "detailed": "Подробно",
    "amount": "Сумма",
    "description": "Описание",
    "addEntry": "Добавить запись",
    "allEntries": "Все записи",
    "backToRoom": "Вернуться в комнату",
    "expense": "Я плачу",
    "loan": "Я должен",
    "splitEqually": "Эта стоимость будет разделена поровну между всеми участниками комнаты.",
    "oweFullAmount": "Вы будете должны полную сумму группе.",
    "roomTitle": "Комната #{code}",
    "splitWith": "Разделить стоимость с:",
    "everyone": "Все",
    "shareWithMe": "Поделиться со мной"
  },
  "Dialog": {
    "cancel": "Отмена",
    "confirm": "Подтвердить"
  },
  "Accessibility": {
    "toggleTheme": "Переключить тему",
    "changeLanguage": "Сменить язык",
    "toggleSimplifiedLayout": "Переключить упрощенный режим"
  }
}

---

--- File: public/manifest.json ---
{
  "name": "Loan Calculator",
  "short_name": "LoanCalc",
  "description": "A simple loan calculator app with offline support.",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#0a0a0a",
  "theme_color": "#3b82f6",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}

---

--- File: public/sw.js ---
if(!self.define){let e,s={};const t=(t,a)=>(t=new URL(t+".js",a).href,s[t]||new Promise(s=>{if("document"in self){const e=document.createElement("script");e.src=t,e.onload=s,document.head.appendChild(e)}else e=t,importScripts(t),s()}).then(()=>{let e=s[t];if(!e)throw new Error(`Module ${t} didn’t register its module`);return e}));self.define=(a,n)=>{const i=e||("document"in self?document.currentScript.src:"")||location.href;if(s[i])return;let c={};const r=e=>t(e,i),o={module:{uri:i},exports:c,require:r};s[i]=Promise.all(a.map(e=>o[e]||r(e))).then(e=>(n(...e),c))}}define(["./workbox-4754cb34"],function(e){"use strict";importScripts(),self.skipWaiting(),e.clientsClaim(),e.precacheAndRoute([{url:"/_next/app-build-manifest.json",revision:"28548fa2225be537cbc3eeceebcbb288"},{url:"/_next/static/chunks/2a223334-c0c139bfff5a21c6.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/338-7af139210c37cfb1.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/341.df3329d77a5faa19.js",revision:"df3329d77a5faa19"},{url:"/_next/static/chunks/385-6cf5b4a5616400ab.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/467-2426cbe9036e4df1.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/472.a3826d29d6854395.js",revision:"a3826d29d6854395"},{url:"/_next/static/chunks/4bd1b696-c1b508e82507cebb.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/684-edd04e53df456058.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/_not-found/page-fab845c8540832e1.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/api/auth/login/route-7c37d8e3be65e1ab.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/api/auth/signup/route-e81f991565b23b38.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/api/entries/route-fea42fc9e523185f.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/api/rooms/%5BroomId%5D/members/route-d06be916e2e60f9d.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/api/rooms/%5BroomId%5D/route-8edd494f6dbb923a.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/api/rooms/route-db39c0b1c2010527.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/api/user/rooms/route-8136fd2bf1d65983.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/layout-c26634fdefab0bd3.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/page-4cb82590e93d16ff.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/rooms/%5BroomId%5D/entries/page-7cdefd8c4891a28c.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/rooms/%5BroomId%5D/page-6c2519f8b9395b19.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/rooms/layout-388bf1e233dace5d.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/app/rooms/page-cc68f7044bc87afa.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/ee560e2c-321bdf731901c8dd.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/framework-f593a28cde54158e.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/main-613efd4dee82bff5.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/main-app-0fdffe2b68fd51ba.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/pages/_app-92f2aae776f86b9c.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/pages/_error-71d2b6a7b832d02a.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/chunks/polyfills-42372ed130431b0a.js",revision:"846118c33b2c0e922d7b3a7676f81f6f"},{url:"/_next/static/chunks/webpack-75e90ec69d4ac2a5.js",revision:"s5pRjJHtOr7O3Jw0CxM8H"},{url:"/_next/static/css/618474562619554e.css",revision:"618474562619554e"},{url:"/_next/static/media/26a46d62cd723877-s.woff2",revision:"befd9c0fdfa3d8a645d5f95717ed6420"},{url:"/_next/static/media/55c55f0601d81cf3-s.woff2",revision:"43828e14271c77b87e3ed582dbff9f74"},{url:"/_next/static/media/581909926a08bbc8-s.woff2",revision:"f0b86e7c24f455280b8df606b89af891"},{url:"/_next/static/media/8e9860b6e62d6359-s.woff2",revision:"01ba6c2a184b8cba08b0d57167664d75"},{url:"/_next/static/media/97e0cb1ae144a2a9-s.woff2",revision:"e360c61c5bd8d90639fd4503c829c2dc"},{url:"/_next/static/media/df0a9ae256c0569c-s.woff2",revision:"d54db44de5ccb18886ece2fda72bdfe0"},{url:"/_next/static/media/e4af272ccee01ff0-s.p.woff2",revision:"65850a373e258f1c897a2b3d75eb74de"},{url:"/_next/static/s5pRjJHtOr7O3Jw0CxM8H/_buildManifest.js",revision:"796284a6b0a32f5fe617465d0221e072"},{url:"/_next/static/s5pRjJHtOr7O3Jw0CxM8H/_ssgManifest.js",revision:"b6652df95db52feb4daf4eca35380933"},{url:"/file.svg",revision:"d09f95206c3fa0bb9bd9fefabfd0ea71"},{url:"/globe.svg",revision:"2aaafa6a49b6563925fe440891e32717"},{url:"/manifest.json",revision:"7a6a8d046769ed648432d52149a2a050"},{url:"/next.svg",revision:"8e061864f388b47f33a1c3780831193e"},{url:"/vercel.svg",revision:"c0af2f507b369b085b35ef4bbe3bcf1e"},{url:"/window.svg",revision:"a2760511c65806022ad20adf74370ff3"}],{ignoreURLParametersMatching:[]}),e.cleanupOutdatedCaches(),e.registerRoute("/",new e.NetworkFirst({cacheName:"start-url",plugins:[{cacheWillUpdate:async({request:e,response:s,event:t,state:a})=>s&&"opaqueredirect"===s.type?new Response(s.body,{status:200,statusText:"OK",headers:s.headers}):s}]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:gstatic)\.com\/.*/i,new e.CacheFirst({cacheName:"google-fonts-webfonts",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:31536e3})]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:googleapis)\.com\/.*/i,new e.StaleWhileRevalidate({cacheName:"google-fonts-stylesheets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,new e.StaleWhileRevalidate({cacheName:"static-font-assets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,new e.StaleWhileRevalidate({cacheName:"static-image-assets",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/image\?url=.+$/i,new e.StaleWhileRevalidate({cacheName:"next-image",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp3|wav|ogg)$/i,new e.CacheFirst({cacheName:"static-audio-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp4)$/i,new e.CacheFirst({cacheName:"static-video-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:js)$/i,new e.StaleWhileRevalidate({cacheName:"static-js-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:css|less)$/i,new e.StaleWhileRevalidate({cacheName:"static-style-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/data\/.+\/.+\.json$/i,new e.StaleWhileRevalidate({cacheName:"next-data",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:json|xml|csv)$/i,new e.NetworkFirst({cacheName:"static-data-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(({url:e})=>{if(!(self.origin===e.origin))return!1;const s=e.pathname;return!s.startsWith("/api/auth/")&&!!s.startsWith("/api/")},new e.NetworkFirst({cacheName:"apis",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:16,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(({url:e})=>{if(!(self.origin===e.origin))return!1;return!e.pathname.startsWith("/api/")},new e.NetworkFirst({cacheName:"others",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(({url:e})=>!(self.origin===e.origin),new e.NetworkFirst({cacheName:"cross-origin",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:3600})]}),"GET")});

---

--- File: public/workbox-4754cb34.js ---
define(["exports"],function(t){"use strict";try{self["workbox:core:6.5.4"]&&_()}catch(t){}const e=(t,...e)=>{let s=t;return e.length>0&&(s+=` :: ${JSON.stringify(e)}`),s};class s extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}try{self["workbox:routing:6.5.4"]&&_()}catch(t){}const n=t=>t&&"object"==typeof t?t:{handle:t};class r{constructor(t,e,s="GET"){this.handler=n(e),this.match=t,this.method=s}setCatchHandler(t){this.catchHandler=n(t)}}class i extends r{constructor(t,e,s){super(({url:e})=>{const s=t.exec(e.href);if(s&&(e.origin===location.origin||0===s.index))return s.slice(1)},e,s)}}class a{constructor(){this.t=new Map,this.i=new Map}get routes(){return this.t}addFetchListener(){self.addEventListener("fetch",t=>{const{request:e}=t,s=this.handleRequest({request:e,event:t});s&&t.respondWith(s)})}addCacheListener(){self.addEventListener("message",t=>{if(t.data&&"CACHE_URLS"===t.data.type){const{payload:e}=t.data,s=Promise.all(e.urlsToCache.map(e=>{"string"==typeof e&&(e=[e]);const s=new Request(...e);return this.handleRequest({request:s,event:t})}));t.waitUntil(s),t.ports&&t.ports[0]&&s.then(()=>t.ports[0].postMessage(!0))}})}handleRequest({request:t,event:e}){const s=new URL(t.url,location.href);if(!s.protocol.startsWith("http"))return;const n=s.origin===location.origin,{params:r,route:i}=this.findMatchingRoute({event:e,request:t,sameOrigin:n,url:s});let a=i&&i.handler;const o=t.method;if(!a&&this.i.has(o)&&(a=this.i.get(o)),!a)return;let c;try{c=a.handle({url:s,request:t,event:e,params:r})}catch(t){c=Promise.reject(t)}const h=i&&i.catchHandler;return c instanceof Promise&&(this.o||h)&&(c=c.catch(async n=>{if(h)try{return await h.handle({url:s,request:t,event:e,params:r})}catch(t){t instanceof Error&&(n=t)}if(this.o)return this.o.handle({url:s,request:t,event:e});throw n})),c}findMatchingRoute({url:t,sameOrigin:e,request:s,event:n}){const r=this.t.get(s.method)||[];for(const i of r){let r;const a=i.match({url:t,sameOrigin:e,request:s,event:n});if(a)return r=a,(Array.isArray(r)&&0===r.length||a.constructor===Object&&0===Object.keys(a).length||"boolean"==typeof a)&&(r=void 0),{route:i,params:r}}return{}}setDefaultHandler(t,e="GET"){this.i.set(e,n(t))}setCatchHandler(t){this.o=n(t)}registerRoute(t){this.t.has(t.method)||this.t.set(t.method,[]),this.t.get(t.method).push(t)}unregisterRoute(t){if(!this.t.has(t.method))throw new s("unregister-route-but-not-found-with-method",{method:t.method});const e=this.t.get(t.method).indexOf(t);if(!(e>-1))throw new s("unregister-route-route-not-registered");this.t.get(t.method).splice(e,1)}}let o;const c=()=>(o||(o=new a,o.addFetchListener(),o.addCacheListener()),o);function h(t,e,n){let a;if("string"==typeof t){const s=new URL(t,location.href);a=new r(({url:t})=>t.href===s.href,e,n)}else if(t instanceof RegExp)a=new i(t,e,n);else if("function"==typeof t)a=new r(t,e,n);else{if(!(t instanceof r))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=t}return c().registerRoute(a),a}try{self["workbox:strategies:6.5.4"]&&_()}catch(t){}const u={cacheWillUpdate:async({response:t})=>200===t.status||0===t.status?t:null},l={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},f=t=>[l.prefix,t,l.suffix].filter(t=>t&&t.length>0).join("-"),w=t=>t||f(l.precache),d=t=>t||f(l.runtime);function p(t,e){const s=new URL(t);for(const t of e)s.searchParams.delete(t);return s.href}class y{constructor(){this.promise=new Promise((t,e)=>{this.resolve=t,this.reject=e})}}const g=new Set;function m(t){return"string"==typeof t?new Request(t):t}class v{constructor(t,e){this.h={},Object.assign(this,e),this.event=e.event,this.u=t,this.l=new y,this.p=[],this.m=[...t.plugins],this.v=new Map;for(const t of this.m)this.v.set(t,{});this.event.waitUntil(this.l.promise)}async fetch(t){const{event:e}=this;let n=m(t);if("navigate"===n.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const r=this.hasCallback("fetchDidFail")?n.clone():null;try{for(const t of this.iterateCallbacks("requestWillFetch"))n=await t({request:n.clone(),event:e})}catch(t){if(t instanceof Error)throw new s("plugin-error-request-will-fetch",{thrownErrorMessage:t.message})}const i=n.clone();try{let t;t=await fetch(n,"navigate"===n.mode?void 0:this.u.fetchOptions);for(const s of this.iterateCallbacks("fetchDidSucceed"))t=await s({event:e,request:i,response:t});return t}catch(t){throw r&&await this.runCallbacks("fetchDidFail",{error:t,event:e,originalRequest:r.clone(),request:i.clone()}),t}}async fetchAndCachePut(t){const e=await this.fetch(t),s=e.clone();return this.waitUntil(this.cachePut(t,s)),e}async cacheMatch(t){const e=m(t);let s;const{cacheName:n,matchOptions:r}=this.u,i=await this.getCacheKey(e,"read"),a=Object.assign(Object.assign({},r),{cacheName:n});s=await caches.match(i,a);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await t({cacheName:n,matchOptions:r,cachedResponse:s,request:i,event:this.event})||void 0;return s}async cachePut(t,e){const n=m(t);var r;await(r=0,new Promise(t=>setTimeout(t,r)));const i=await this.getCacheKey(n,"write");if(!e)throw new s("cache-put-with-no-response",{url:(a=i.url,new URL(String(a),location.href).href.replace(new RegExp(`^${location.origin}`),""))});var a;const o=await this.R(e);if(!o)return!1;const{cacheName:c,matchOptions:h}=this.u,u=await self.caches.open(c),l=this.hasCallback("cacheDidUpdate"),f=l?await async function(t,e,s,n){const r=p(e.url,s);if(e.url===r)return t.match(e,n);const i=Object.assign(Object.assign({},n),{ignoreSearch:!0}),a=await t.keys(e,i);for(const e of a)if(r===p(e.url,s))return t.match(e,n)}(u,i.clone(),["__WB_REVISION__"],h):null;try{await u.put(i,l?o.clone():o)}catch(t){if(t instanceof Error)throw"QuotaExceededError"===t.name&&await async function(){for(const t of g)await t()}(),t}for(const t of this.iterateCallbacks("cacheDidUpdate"))await t({cacheName:c,oldResponse:f,newResponse:o.clone(),request:i,event:this.event});return!0}async getCacheKey(t,e){const s=`${t.url} | ${e}`;if(!this.h[s]){let n=t;for(const t of this.iterateCallbacks("cacheKeyWillBeUsed"))n=m(await t({mode:e,request:n,event:this.event,params:this.params}));this.h[s]=n}return this.h[s]}hasCallback(t){for(const e of this.u.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const s of this.iterateCallbacks(t))await s(e)}*iterateCallbacks(t){for(const e of this.u.plugins)if("function"==typeof e[t]){const s=this.v.get(e),n=n=>{const r=Object.assign(Object.assign({},n),{state:s});return e[t](r)};yield n}}waitUntil(t){return this.p.push(t),t}async doneWaiting(){let t;for(;t=this.p.shift();)await t}destroy(){this.l.resolve(null)}async R(t){let e=t,s=!1;for(const t of this.iterateCallbacks("cacheWillUpdate"))if(e=await t({request:this.request,response:e,event:this.event})||void 0,s=!0,!e)break;return s||e&&200!==e.status&&(e=void 0),e}}class R{constructor(t={}){this.cacheName=d(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,s="string"==typeof t.request?new Request(t.request):t.request,n="params"in t?t.params:void 0,r=new v(this,{event:e,request:s,params:n}),i=this.q(r,s,e);return[i,this.D(i,r,s,e)]}async q(t,e,n){let r;await t.runCallbacks("handlerWillStart",{event:n,request:e});try{if(r=await this.U(e,t),!r||"error"===r.type)throw new s("no-response",{url:e.url})}catch(s){if(s instanceof Error)for(const i of t.iterateCallbacks("handlerDidError"))if(r=await i({error:s,event:n,request:e}),r)break;if(!r)throw s}for(const s of t.iterateCallbacks("handlerWillRespond"))r=await s({event:n,request:e,response:r});return r}async D(t,e,s,n){let r,i;try{r=await t}catch(i){}try{await e.runCallbacks("handlerDidRespond",{event:n,request:s,response:r}),await e.doneWaiting()}catch(t){t instanceof Error&&(i=t)}if(await e.runCallbacks("handlerDidComplete",{event:n,request:s,response:r,error:i}),e.destroy(),i)throw i}}function b(t){t.then(()=>{})}function q(){return q=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var n in s)({}).hasOwnProperty.call(s,n)&&(t[n]=s[n])}return t},q.apply(null,arguments)}let D,U;const x=new WeakMap,L=new WeakMap,I=new WeakMap,C=new WeakMap,E=new WeakMap;let N={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return L.get(t);if("objectStoreNames"===e)return t.objectStoreNames||I.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return k(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function O(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(U||(U=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(B(this),e),k(x.get(this))}:function(...e){return k(t.apply(B(this),e))}:function(e,...s){const n=t.call(B(this),e,...s);return I.set(n,e.sort?e.sort():[e]),k(n)}}function T(t){return"function"==typeof t?O(t):(t instanceof IDBTransaction&&function(t){if(L.has(t))return;const e=new Promise((e,s)=>{const n=()=>{t.removeEventListener("complete",r),t.removeEventListener("error",i),t.removeEventListener("abort",i)},r=()=>{e(),n()},i=()=>{s(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",r),t.addEventListener("error",i),t.addEventListener("abort",i)});L.set(t,e)}(t),e=t,(D||(D=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(t=>e instanceof t)?new Proxy(t,N):t);var e}function k(t){if(t instanceof IDBRequest)return function(t){const e=new Promise((e,s)=>{const n=()=>{t.removeEventListener("success",r),t.removeEventListener("error",i)},r=()=>{e(k(t.result)),n()},i=()=>{s(t.error),n()};t.addEventListener("success",r),t.addEventListener("error",i)});return e.then(e=>{e instanceof IDBCursor&&x.set(e,t)}).catch(()=>{}),E.set(e,t),e}(t);if(C.has(t))return C.get(t);const e=T(t);return e!==t&&(C.set(t,e),E.set(e,t)),e}const B=t=>E.get(t);const P=["get","getKey","getAll","getAllKeys","count"],M=["put","add","delete","clear"],W=new Map;function j(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(W.get(e))return W.get(e);const s=e.replace(/FromIndex$/,""),n=e!==s,r=M.includes(s);if(!(s in(n?IDBIndex:IDBObjectStore).prototype)||!r&&!P.includes(s))return;const i=async function(t,...e){const i=this.transaction(t,r?"readwrite":"readonly");let a=i.store;return n&&(a=a.index(e.shift())),(await Promise.all([a[s](...e),r&&i.done]))[0]};return W.set(e,i),i}N=(t=>q({},t,{get:(e,s,n)=>j(e,s)||t.get(e,s,n),has:(e,s)=>!!j(e,s)||t.has(e,s)}))(N);try{self["workbox:expiration:6.5.4"]&&_()}catch(t){}const S="cache-entries",K=t=>{const e=new URL(t,location.href);return e.hash="",e.href};class A{constructor(t){this._=null,this.L=t}I(t){const e=t.createObjectStore(S,{keyPath:"id"});e.createIndex("cacheName","cacheName",{unique:!1}),e.createIndex("timestamp","timestamp",{unique:!1})}C(t){this.I(t),this.L&&function(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);e&&s.addEventListener("blocked",t=>e(t.oldVersion,t)),k(s).then(()=>{})}(this.L)}async setTimestamp(t,e){const s={url:t=K(t),timestamp:e,cacheName:this.L,id:this.N(t)},n=(await this.getDb()).transaction(S,"readwrite",{durability:"relaxed"});await n.store.put(s),await n.done}async getTimestamp(t){const e=await this.getDb(),s=await e.get(S,this.N(t));return null==s?void 0:s.timestamp}async expireEntries(t,e){const s=await this.getDb();let n=await s.transaction(S).store.index("timestamp").openCursor(null,"prev");const r=[];let i=0;for(;n;){const s=n.value;s.cacheName===this.L&&(t&&s.timestamp<t||e&&i>=e?r.push(n.value):i++),n=await n.continue()}const a=[];for(const t of r)await s.delete(S,t.id),a.push(t.url);return a}N(t){return this.L+"|"+K(t)}async getDb(){return this._||(this._=await function(t,e,{blocked:s,upgrade:n,blocking:r,terminated:i}={}){const a=indexedDB.open(t,e),o=k(a);return n&&a.addEventListener("upgradeneeded",t=>{n(k(a.result),t.oldVersion,t.newVersion,k(a.transaction),t)}),s&&a.addEventListener("blocked",t=>s(t.oldVersion,t.newVersion,t)),o.then(t=>{i&&t.addEventListener("close",()=>i()),r&&t.addEventListener("versionchange",t=>r(t.oldVersion,t.newVersion,t))}).catch(()=>{}),o}("workbox-expiration",1,{upgrade:this.C.bind(this)})),this._}}class F{constructor(t,e={}){this.O=!1,this.T=!1,this.k=e.maxEntries,this.B=e.maxAgeSeconds,this.P=e.matchOptions,this.L=t,this.M=new A(t)}async expireEntries(){if(this.O)return void(this.T=!0);this.O=!0;const t=this.B?Date.now()-1e3*this.B:0,e=await this.M.expireEntries(t,this.k),s=await self.caches.open(this.L);for(const t of e)await s.delete(t,this.P);this.O=!1,this.T&&(this.T=!1,b(this.expireEntries()))}async updateTimestamp(t){await this.M.setTimestamp(t,Date.now())}async isURLExpired(t){if(this.B){const e=await this.M.getTimestamp(t),s=Date.now()-1e3*this.B;return void 0===e||e<s}return!1}async delete(){this.T=!1,await this.M.expireEntries(1/0)}}try{self["workbox:range-requests:6.5.4"]&&_()}catch(t){}async function H(t,e){try{if(206===e.status)return e;const n=t.headers.get("range");if(!n)throw new s("no-range-header");const r=function(t){const e=t.trim().toLowerCase();if(!e.startsWith("bytes="))throw new s("unit-must-be-bytes",{normalizedRangeHeader:e});if(e.includes(","))throw new s("single-range-only",{normalizedRangeHeader:e});const n=/(\d*)-(\d*)/.exec(e);if(!n||!n[1]&&!n[2])throw new s("invalid-range-values",{normalizedRangeHeader:e});return{start:""===n[1]?void 0:Number(n[1]),end:""===n[2]?void 0:Number(n[2])}}(n),i=await e.blob(),a=function(t,e,n){const r=t.size;if(n&&n>r||e&&e<0)throw new s("range-not-satisfiable",{size:r,end:n,start:e});let i,a;return void 0!==e&&void 0!==n?(i=e,a=n+1):void 0!==e&&void 0===n?(i=e,a=r):void 0!==n&&void 0===e&&(i=r-n,a=r),{start:i,end:a}}(i,r.start,r.end),o=i.slice(a.start,a.end),c=o.size,h=new Response(o,{status:206,statusText:"Partial Content",headers:e.headers});return h.headers.set("Content-Length",String(c)),h.headers.set("Content-Range",`bytes ${a.start}-${a.end-1}/${i.size}`),h}catch(t){return new Response("",{status:416,statusText:"Range Not Satisfiable"})}}function $(t,e){const s=e();return t.waitUntil(s),s}try{self["workbox:precaching:6.5.4"]&&_()}catch(t){}function z(t){if(!t)throw new s("add-to-cache-list-unexpected-type",{entry:t});if("string"==typeof t){const e=new URL(t,location.href);return{cacheKey:e.href,url:e.href}}const{revision:e,url:n}=t;if(!n)throw new s("add-to-cache-list-unexpected-type",{entry:t});if(!e){const t=new URL(n,location.href);return{cacheKey:t.href,url:t.href}}const r=new URL(n,location.href),i=new URL(n,location.href);return r.searchParams.set("__WB_REVISION__",e),{cacheKey:r.href,url:i.href}}class G{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:t,state:e})=>{e&&(e.originalRequest=t)},this.cachedResponseWillBeUsed=async({event:t,state:e,cachedResponse:s})=>{if("install"===t.type&&e&&e.originalRequest&&e.originalRequest instanceof Request){const t=e.originalRequest.url;s?this.notUpdatedURLs.push(t):this.updatedURLs.push(t)}return s}}}class V{constructor({precacheController:t}){this.cacheKeyWillBeUsed=async({request:t,params:e})=>{const s=(null==e?void 0:e.cacheKey)||this.W.getCacheKeyForURL(t.url);return s?new Request(s,{headers:t.headers}):t},this.W=t}}let J,Q;async function X(t,e){let n=null;if(t.url){n=new URL(t.url).origin}if(n!==self.location.origin)throw new s("cross-origin-copy-response",{origin:n});const r=t.clone(),i={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},a=e?e(i):i,o=function(){if(void 0===J){const t=new Response("");if("body"in t)try{new Response(t.body),J=!0}catch(t){J=!1}J=!1}return J}()?r.body:await r.blob();return new Response(o,a)}class Y extends R{constructor(t={}){t.cacheName=w(t.cacheName),super(t),this.j=!1!==t.fallbackToNetwork,this.plugins.push(Y.copyRedirectedCacheableResponsesPlugin)}async U(t,e){const s=await e.cacheMatch(t);return s||(e.event&&"install"===e.event.type?await this.S(t,e):await this.K(t,e))}async K(t,e){let n;const r=e.params||{};if(!this.j)throw new s("missing-precache-entry",{cacheName:this.cacheName,url:t.url});{const s=r.integrity,i=t.integrity,a=!i||i===s;n=await e.fetch(new Request(t,{integrity:"no-cors"!==t.mode?i||s:void 0})),s&&a&&"no-cors"!==t.mode&&(this.A(),await e.cachePut(t,n.clone()))}return n}async S(t,e){this.A();const n=await e.fetch(t);if(!await e.cachePut(t,n.clone()))throw new s("bad-precaching-response",{url:t.url,status:n.status});return n}A(){let t=null,e=0;for(const[s,n]of this.plugins.entries())n!==Y.copyRedirectedCacheableResponsesPlugin&&(n===Y.defaultPrecacheCacheabilityPlugin&&(t=s),n.cacheWillUpdate&&e++);0===e?this.plugins.push(Y.defaultPrecacheCacheabilityPlugin):e>1&&null!==t&&this.plugins.splice(t,1)}}Y.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:t})=>!t||t.status>=400?null:t},Y.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:t})=>t.redirected?await X(t):t};class Z{constructor({cacheName:t,plugins:e=[],fallbackToNetwork:s=!0}={}){this.F=new Map,this.H=new Map,this.$=new Map,this.u=new Y({cacheName:w(t),plugins:[...e,new V({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this.u}precache(t){this.addToCacheList(t),this.G||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this.G=!0)}addToCacheList(t){const e=[];for(const n of t){"string"==typeof n?e.push(n):n&&void 0===n.revision&&e.push(n.url);const{cacheKey:t,url:r}=z(n),i="string"!=typeof n&&n.revision?"reload":"default";if(this.F.has(r)&&this.F.get(r)!==t)throw new s("add-to-cache-list-conflicting-entries",{firstEntry:this.F.get(r),secondEntry:t});if("string"!=typeof n&&n.integrity){if(this.$.has(t)&&this.$.get(t)!==n.integrity)throw new s("add-to-cache-list-conflicting-integrities",{url:r});this.$.set(t,n.integrity)}if(this.F.set(r,t),this.H.set(r,i),e.length>0){const t=`Workbox is precaching URLs without revision info: ${e.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(t)}}}install(t){return $(t,async()=>{const e=new G;this.strategy.plugins.push(e);for(const[e,s]of this.F){const n=this.$.get(s),r=this.H.get(e),i=new Request(e,{integrity:n,cache:r,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:s},request:i,event:t}))}const{updatedURLs:s,notUpdatedURLs:n}=e;return{updatedURLs:s,notUpdatedURLs:n}})}activate(t){return $(t,async()=>{const t=await self.caches.open(this.strategy.cacheName),e=await t.keys(),s=new Set(this.F.values()),n=[];for(const r of e)s.has(r.url)||(await t.delete(r),n.push(r.url));return{deletedURLs:n}})}getURLsToCacheKeys(){return this.F}getCachedURLs(){return[...this.F.keys()]}getCacheKeyForURL(t){const e=new URL(t,location.href);return this.F.get(e.href)}getIntegrityForCacheKey(t){return this.$.get(t)}async matchPrecache(t){const e=t instanceof Request?t.url:t,s=this.getCacheKeyForURL(e);if(s){return(await self.caches.open(this.strategy.cacheName)).match(s)}}createHandlerBoundToURL(t){const e=this.getCacheKeyForURL(t);if(!e)throw new s("non-precached-url",{url:t});return s=>(s.request=new Request(t),s.params=Object.assign({cacheKey:e},s.params),this.strategy.handle(s))}}const tt=()=>(Q||(Q=new Z),Q);class et extends r{constructor(t,e){super(({request:s})=>{const n=t.getURLsToCacheKeys();for(const r of function*(t,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:s="index.html",cleanURLs:n=!0,urlManipulation:r}={}){const i=new URL(t,location.href);i.hash="",yield i.href;const a=function(t,e=[]){for(const s of[...t.searchParams.keys()])e.some(t=>t.test(s))&&t.searchParams.delete(s);return t}(i,e);if(yield a.href,s&&a.pathname.endsWith("/")){const t=new URL(a.href);t.pathname+=s,yield t.href}if(n){const t=new URL(a.href);t.pathname+=".html",yield t.href}if(r){const t=r({url:i});for(const e of t)yield e.href}}(s.url,e)){const e=n.get(r);if(e){return{cacheKey:e,integrity:t.getIntegrityForCacheKey(e)}}}},t.strategy)}}t.CacheFirst=class extends R{async U(t,e){let n,r=await e.cacheMatch(t);if(!r)try{r=await e.fetchAndCachePut(t)}catch(t){t instanceof Error&&(n=t)}if(!r)throw new s("no-response",{url:t.url,error:n});return r}},t.ExpirationPlugin=class{constructor(t={}){this.cachedResponseWillBeUsed=async({event:t,request:e,cacheName:s,cachedResponse:n})=>{if(!n)return null;const r=this.V(n),i=this.J(s);b(i.expireEntries());const a=i.updateTimestamp(e.url);if(t)try{t.waitUntil(a)}catch(t){}return r?n:null},this.cacheDidUpdate=async({cacheName:t,request:e})=>{const s=this.J(t);await s.updateTimestamp(e.url),await s.expireEntries()},this.X=t,this.B=t.maxAgeSeconds,this.Y=new Map,t.purgeOnQuotaError&&function(t){g.add(t)}(()=>this.deleteCacheAndMetadata())}J(t){if(t===d())throw new s("expire-custom-caches-only");let e=this.Y.get(t);return e||(e=new F(t,this.X),this.Y.set(t,e)),e}V(t){if(!this.B)return!0;const e=this.Z(t);if(null===e)return!0;return e>=Date.now()-1e3*this.B}Z(t){if(!t.headers.has("date"))return null;const e=t.headers.get("date"),s=new Date(e).getTime();return isNaN(s)?null:s}async deleteCacheAndMetadata(){for(const[t,e]of this.Y)await self.caches.delete(t),await e.delete();this.Y=new Map}},t.NetworkFirst=class extends R{constructor(t={}){super(t),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(u),this.tt=t.networkTimeoutSeconds||0}async U(t,e){const n=[],r=[];let i;if(this.tt){const{id:s,promise:a}=this.et({request:t,logs:n,handler:e});i=s,r.push(a)}const a=this.st({timeoutId:i,request:t,logs:n,handler:e});r.push(a);const o=await e.waitUntil((async()=>await e.waitUntil(Promise.race(r))||await a)());if(!o)throw new s("no-response",{url:t.url});return o}et({request:t,logs:e,handler:s}){let n;return{promise:new Promise(e=>{n=setTimeout(async()=>{e(await s.cacheMatch(t))},1e3*this.tt)}),id:n}}async st({timeoutId:t,request:e,logs:s,handler:n}){let r,i;try{i=await n.fetchAndCachePut(e)}catch(t){t instanceof Error&&(r=t)}return t&&clearTimeout(t),!r&&i||(i=await n.cacheMatch(e)),i}},t.RangeRequestsPlugin=class{constructor(){this.cachedResponseWillBeUsed=async({request:t,cachedResponse:e})=>e&&t.headers.has("range")?await H(t,e):e}},t.StaleWhileRevalidate=class extends R{constructor(t={}){super(t),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(u)}async U(t,e){const n=e.fetchAndCachePut(t).catch(()=>{});e.waitUntil(n);let r,i=await e.cacheMatch(t);if(i);else try{i=await n}catch(t){t instanceof Error&&(r=t)}if(!i)throw new s("no-response",{url:t.url,error:r});return i}},t.cleanupOutdatedCaches=function(){self.addEventListener("activate",t=>{const e=w();t.waitUntil((async(t,e="-precache-")=>{const s=(await self.caches.keys()).filter(s=>s.includes(e)&&s.includes(self.registration.scope)&&s!==t);return await Promise.all(s.map(t=>self.caches.delete(t))),s})(e).then(t=>{}))})},t.clientsClaim=function(){self.addEventListener("activate",()=>self.clients.claim())},t.precacheAndRoute=function(t,e){!function(t){tt().precache(t)}(t),function(t){const e=tt();h(new et(e,t))}(e)},t.registerRoute=h});

---

--- File: src/app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
  --card: #ffffff;
  --card-border: #e5e7eb;
  --card-foreground: #171717;
  --primary: #3b82f6; /* blue-500 */
  --primary-hover: #2563eb; /* blue-600 */
  --primary-foreground: #ffffff;
  --secondary: #4ade80; /* green-500 */
  --secondary-hover: #16a34a; /* green-600 */
  --secondary-foreground: #ffffff;
  --muted: #f3f4f6; /* gray-100 */
  --muted-foreground: #6b7280; /* gray-500 */
  --input-bg: #ffffff;
  --input-border: #d1d5db; /* gray-300 */
  --danger: #ef4444; /* red-500 */
  --danger-hover: #dc2626; /* red-600 */
  --success: #22c55e; /* green-500 */
}

[data-theme='dark'] {
  --background: #0a0a0a;
  --foreground: #ededed;
  --card: #1f2937; /* gray-800 */
  --card-border: #4b5563; /* gray-600 */
  --card-foreground: #ededed;
  --primary: #60a5fa; /* blue-400 */
  --primary-hover: #3b82f6; /* blue-500 */
  --primary-foreground: #171717;
  --secondary: #4ade80; /* green-500 */
  --secondary-hover: #22c55e; /* green-600 */
  --secondary-foreground: #171717;
  --muted: #374151; /* gray-700 */
  --muted-foreground: #9ca3af; /* gray-400 */
  --input-bg: #374151; /* gray-700 */
  --input-border: #6b7280; /* gray-500 */
  --danger: #f87171; /* red-400 */
  --danger-hover: #ef4444; /* red-500 */
  --success: #4ade80; /* green-400 */
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

button {
  cursor: pointer;
}

/* Custom scrollbar styles */
::-webkit-scrollbar {
  width: 8px;
}
::-webkit-scrollbar-track {
  background: transparent;
}
::-webkit-scrollbar-thumb {
  background: var(--card-border);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: var(--muted-foreground);
}


/* Animation Keyframes */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(8px); }
  to { opacity: 1; transform: translateY(0); }
}
@keyframes scaleIn {
  from { opacity: 0; transform: scale(0.97); }
  to { opacity: 1; transform: scale(1); }
}

.animate-fadeIn {
  animation: fadeIn 0.4s ease-out forwards;
}
.animate-scaleIn {
  animation: scaleIn 0.3s ease-out forwards;
}


/* --- Base Component Styles & Transitions --- */

/* Default transitions for smoother interactions */
button, a, input {
    transition: all 0.2s ease-in-out;
}

/* Input styles */
.themed-input {
    background-color: var(--input-bg);
    border: 1px solid var(--input-border);
    color: var(--foreground);
}
.themed-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary) 20%, transparent);
}

/* Button styles with enhanced hover effects */
.btn-primary, .btn-secondary, .btn-muted, .btn-danger {
  box-shadow: 0 1px 2px rgba(0,0,0,0.05);
}

.btn-primary {
    background-color: var(--primary);
    color: var(--primary-foreground);
}
.btn-primary:hover {
    background-color: var(--primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in srgb, var(--primary) 30%, transparent);
}

.btn-secondary {
    background-color: var(--secondary);
    color: var(--secondary-foreground);
}
.btn-secondary:hover {
    background-color: var(--secondary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in srgb, var(--secondary) 30%, transparent);
}

.btn-muted {
  background-color: var(--muted);
  color: var(--muted-foreground);
  border: 1px solid var(--card-border);
}
.btn-muted:hover {
  background-color: var(--card-border);
  border-color: var(--muted-foreground);
  transform: translateY(-1px);
}

.btn-danger {
    background-color: var(--danger);
    color: var(--primary-foreground);
}
.btn-danger:hover {
    background-color: var(--danger-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px color-mix(in srgb, var(--danger) 30%, transparent);
}

---

--- File: src/app/layout.tsx ---
// src/app/layout.tsx
import type { Metadata, Viewport } from "next";
import { Inter } from "next/font/google";
import IntlProvider from "@/components/IntlProvider";
import ThemeProvider from "@/components/ThemeProvider";
import SimplifiedLayoutProvider from "@/components/SimplifiedLayoutProvider";
import SyncProvider from "@/components/SyncProvider";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Loan Calculator",
  description: "A simple loan calculator app with offline support.",
  manifest: "/manifest.json",
  appleWebApp: {
    capable: true,
    statusBarStyle: "default",
    title: "Loan Calculator",
  },
};

// Add this new viewport export
export const viewport: Viewport = {
  themeColor: "#3b82f6",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head />
      <body className={inter.className}>
        <ThemeProvider>
          <IntlProvider>
            <SimplifiedLayoutProvider>
              <SyncProvider>
                <main>{children}</main>
              </SyncProvider>
            </SimplifiedLayoutProvider>
          </IntlProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}

---

--- File: src/app/page.tsx ---
"use client";

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import messages from '../../messages/en.json'; // Import messages to get keys

// Create a type for valid keys within the 'Auth' section of your translations
type AuthTranslationKey = keyof typeof messages.Auth;

export default function AuthPage() {
    const t = useTranslations('Auth');
    const [isLogin, setIsLogin] = useState(true);
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(true);
    const router = useRouter();

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            router.replace('/rooms');
        } else {
            setIsLoading(false);
        }
    }, [router]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');
        const endpoint = isLogin ? '/api/auth/login' : '/api/auth/signup';
        const res = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password }),
        });

        const data = await res.json();
        if (res.ok) {
            if (isLogin) {
                localStorage.setItem('token', data.token);
                router.push('/rooms');
            } else {
                setIsLogin(true);
            }
        } else {
            // Use the type-safe key for the translation function
            setError(t(data.message as AuthTranslationKey));
        }
    };

    if (isLoading) {
        return <div className="min-h-screen bg-muted" />;
    }

    return (
        <div className="min-h-screen bg-muted flex flex-col justify-center items-center">
            <div className="bg-card p-8 rounded-lg shadow-md w-full max-w-md border border-card-border">
                <h1 className="text-2xl font-bold mb-6 text-center text-card-foreground">{isLogin ? t('login') : t('signup')}</h1>
                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label className="block text-muted-foreground mb-2" htmlFor="username">{t('username')}</label>
                        <input
                            id="username"
                            type="text"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            className="w-full px-3 py-2 border rounded-lg themed-input"
                            required
                        />
                    </div>
                    <div className="mb-6">
                        <label className="block text-muted-foreground mb-2" htmlFor="password">{t('password')}</label>
                        <input
                            id="password"
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            className="w-full px-3 py-2 border rounded-lg themed-input"
                            required
                        />
                    </div>
                    {error && <p className="text-danger text-sm text-center mb-4">{error}</p>}
                    <button type="submit" className="w-full py-2 rounded-lg btn-primary">
                        {isLogin ? t('login') : t('signup')}
                    </button>
                </form>
                <button onClick={() => setIsLogin(!isLogin)} className="mt-4 text-center w-full text-sm text-primary hover:underline">
                    {isLogin ? t('dontHaveAccount') : t('alreadyHaveAccount')}
                </button>
            </div>
        </div>
    );
}

---

--- File: src/app/api/auth/login/route.ts ---
import { NextResponse } from 'next/server';
import { compare } from 'bcryptjs';
import { sign } from 'jsonwebtoken';
import { db } from '@/lib/db';
import { JWT_SECRET } from '@/lib/constants';

export async function POST(req: Request) {
    try {
        const { username, password } = await req.json();

        const response = await db.query('SELECT * FROM users WHERE username = $1', [username]);
        if (response.rows.length === 0) {
            return NextResponse.json({ message: 'loginError' }, { status: 401 });
        }

        const user = response.rows[0];
        const passwordMatch = await compare(password, user.password);

        if (!passwordMatch) {
            return NextResponse.json({ message: 'loginError' }, { status: 401 });
        }

        const token = sign({ userId: user.id, username: user.username }, JWT_SECRET!, { expiresIn: '365d' });

        return NextResponse.json({ token });
    } catch (error) {
        console.error(error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/auth/signup/route.ts ---
import { NextResponse } from 'next/server';
import { hash } from 'bcryptjs';
import { db } from '@/lib/db';

// Define a type for the potential Postgres error to make our catch block type-safe
interface PostgresError extends Error {
    code?: string;
    constraint?: string;
}

export async function POST(req: Request) {
    try {
        const { username, password } = await req.json();
        // Use x-forwarded-for header (set by Nginx/Caddy) or fall back to a default.
        const ip = req.headers.get('x-forwarded-for') ?? '127.0.0.1';

        const hashedPassword = await hash(password, 10);
        await db.query(
            'INSERT INTO users (username, password, last_ip) VALUES ($1, $2, $3)',
            [username, hashedPassword, ip]
        );

        return NextResponse.json({ message: 'User created successfully' }, { status: 201 });
    } catch (e: unknown) {
        const error = e as PostgresError;
        // Check for the specific duplicate username error from Postgres
        if (error.code === '23505' && error.constraint === 'users_username_key') {
            return NextResponse.json({ message: 'signupUsernameError' }, { status: 409 });
        }
        console.error(error);
        return NextResponse.json({ message: 'An error occurred during signup.' }, { status: 500 });
    }
}

---

--- File: src/app/api/entries/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

export async function POST(req: Request) {
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        const { roomId, amount, description, splitWithUserIds } = await req.json();

        // For expenses, splitWithUserIds will be an array of user IDs.
        // We must manually stringify it for the JSONB column.
        // For loans, it will be null.
        const finalSplitWith = Array.isArray(splitWithUserIds) ? JSON.stringify(splitWithUserIds) : null;

        await db.query(
            'INSERT INTO entries (room_id, user_id, amount, description, split_with_user_ids) VALUES ($1, $2, $3, $4, $5)',
            [roomId, user.userId, amount, description, finalSplitWith]
        );

        return NextResponse.json({ message: 'Entry added successfully' });
    } catch (error) {
        console.error(error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/rooms/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

interface PostgresError extends Error {
    code?: string;
    constraint?: string;
}

export async function POST(req: Request) {
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        // Try to parse the body. If it's empty or malformed, default to an empty object.
        const body = await req.json().catch(() => ({}));
        
        // Check if the intent is to JOIN a room.
        // This is true if 'roomCode' is a property in the body.
        if (typeof body.roomCode === 'string') {
            const roomCode = body.roomCode.trim().toUpperCase();

            // Explicitly block empty room codes.
            if (!roomCode) {
                 return NextResponse.json({ message: 'joinFailed' }, { status: 400 }); // Bad Request
            }

            const roomResult = await db.query('SELECT id FROM rooms WHERE code = $1', [roomCode]);
            if (roomResult.rows.length === 0) {
                return NextResponse.json({ message: 'joinFailed' }, { status: 404 });
            }
            const roomId = roomResult.rows[0].id;

            await db.query('INSERT INTO room_members (user_id, room_id) VALUES ($1, $2) ON CONFLICT (user_id, room_id) DO NOTHING', [user.userId, roomId]);
            return NextResponse.json({ roomId });

        } else {
            // Intent is to CREATE a new room.
            const MAX_RETRIES = 5;
            for (let i = 0; i < MAX_RETRIES; i++) {
                const newCode = Math.random().toString(36).substring(2, 8).toUpperCase();
                const client = await db.connect();
                try {
                    await client.query('BEGIN');
                    const roomResult = await client.query(
                        'INSERT INTO rooms (code, creator_id) VALUES ($1, $2) RETURNING id',
                        [newCode, user.userId]
                    );
                    const roomId = roomResult.rows[0].id;

                    await client.query(
                        'INSERT INTO room_members (user_id, room_id) VALUES ($1, $2)',
                        [user.userId, roomId]
                    );

                    await client.query('COMMIT');
                    return NextResponse.json({ roomId, code: newCode }, { status: 201 });
                } catch (e: unknown) {
                    await client.query('ROLLBACK');
                    const error = e as PostgresError;
                    if (error.code === '23505' && error.constraint === 'rooms_code_key') {
                        console.warn(`Attempt ${i + 1}: Duplicate room code generated ('${newCode}'). Retrying...`);
                    } else {
                        throw error;
                    }
                } finally {
                    client.release();
                }
            }
            console.error(`Failed to create a room after ${MAX_RETRIES} attempts due to duplicate codes.`);
            return NextResponse.json({ message: 'createFailed' }, { status: 500 });
        }
    } catch (error) {
        console.error('An error occurred in /api/rooms:', error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/rooms/[roomId]/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

interface DbEntry {
    id: number;
    room_id: number;
    user_id: number;
    amount: string;
    description: string;
    created_at: string;
    username: string;
    split_with_user_ids: number[] | null;
}

export async function GET(req: Request) {
    try {
        const url = new URL(req.url);
        const pathnameParts = url.pathname.split('/');
        const roomId = pathnameParts[pathnameParts.length - 1];

        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        const memberCheckResult = await db.query(
            'SELECT 1 FROM room_members WHERE room_id = $1 AND user_id = $2',
            [roomId, user.userId]
        );

        if (memberCheckResult.rows.length === 0) {
            return NextResponse.json({ message: 'Room not found' }, { status: 404 });
        }
        
        const roomResult = await db.query('SELECT code FROM rooms WHERE id = $1', [roomId]);
        if (roomResult.rows.length === 0) {
            return NextResponse.json({ message: 'Room not found' }, { status: 404 });
        }
        const roomCode = roomResult.rows[0].code;

        const entriesResult = await db.query(
            'SELECT e.*, u.username FROM entries e JOIN users u ON e.user_id = u.id WHERE e.room_id = $1 ORDER BY e.created_at ASC',
            [roomId]
        );

        const membersResult = await db.query(
            'SELECT u.id, u.username FROM users u JOIN room_members rm ON u.id = rm.user_id WHERE rm.room_id = $1',
            [roomId]
        );
        
        const members: { id: number; username: string }[] = membersResult.rows;
        if (members.length === 0) {
           return NextResponse.json({ message: 'No members in room or room does not exist' }, { status: 404 });
        }
        
        const finalBalances: { [key: string]: number } = {};
        members.forEach(member => {
            finalBalances[member.id] = 0;
        });

        const entries: DbEntry[] = entriesResult.rows;

        entries.forEach(entry => {
            const amount = parseFloat(entry.amount);
            const payerId = entry.user_id;

            if (amount > 0) { // This is an Expense
                const participants = entry.split_with_user_ids;

                // If participants list is null/empty (legacy or error), default to splitting among everyone
                if (!participants || participants.length === 0) {
                    const share = amount / members.length;
                    members.forEach(member => {
                        if (member.id === payerId) {
                            finalBalances[member.id] += (amount - share);
                        } else {
                            finalBalances[member.id] -= share;
                        }
                    });
                } else {
                    // New logic: Split only among the specified participants
                    const numParticipants = participants.length;
                    const share = amount / numParticipants;

                    // The payer is always credited the full amount they paid.
                    finalBalances[payerId] += amount;

                    // Each participant (which may or may not include the payer) is debited their share.
                    participants.forEach(participantId => {
                        if (finalBalances[participantId] !== undefined) {
                            finalBalances[participantId] -= share;
                        }
                    });
                }
            } else if (amount < 0) { // This is a Loan
                const loanAmount = Math.abs(amount);
                const borrowerId = payerId;
                
                finalBalances[borrowerId] -= loanAmount;

                const lenders = members.filter(m => m.id !== borrowerId);
                if (lenders.length > 0) {
                    const creditPerLender = loanAmount / lenders.length;
                    lenders.forEach(lender => {
                        finalBalances[lender.id] += creditPerLender;
                    });
                }
            }
        });


        // Prepare response object
        const currentUserBalance = finalBalances[user.userId] || 0;
        const otherUserBalances: { [key: string]: number } = {};
        members.forEach(member => {
            if (member.id !== user.userId) {
                otherUserBalances[member.username] = finalBalances[member.id] || 0;
            }
        });

        const reversedEntries = entries.reverse();

        return NextResponse.json({
            code: roomCode,
            entries: reversedEntries,
            balances: otherUserBalances,
            currentUserBalance,
            members,
            currentUserId: user.userId
        });
    } catch (error) {
        console.error(error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/api/rooms/[roomId]/members/route.ts ---
// src/app/api/rooms/[roomId]/members/route.ts
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

export async function DELETE(req: Request) {
    const client = await db.connect();
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        // Manually parse the roomId from the request URL.
        const url = new URL(req.url);
        const pathnameParts = url.pathname.split('/');
        // The path is /api/rooms/[roomId]/members, so roomId is the 3rd to last part
        const roomId = pathnameParts[pathnameParts.length - 2];

        if (!roomId || isNaN(parseInt(roomId, 10))) {
            return NextResponse.json({ message: 'Invalid Room ID' }, { status: 400 });
        }
        const numericRoomId = parseInt(roomId, 10);
        
        await client.query('BEGIN');

        // Remove the user from the room
        const deleteResult = await client.query(
            'DELETE FROM room_members WHERE user_id = $1 AND room_id = $2',
            [user.userId, numericRoomId]
        );

        if (deleteResult.rowCount === 0) {
            // The user wasn't a member of the room, so there's nothing to do.
            // We can consider this a successful state.
            await client.query('COMMIT');
            return NextResponse.json({ message: 'User already not in room' });
        }

        // Check if the user was the creator of the room. If so, nullify the creator_id.
        await client.query(
            'UPDATE rooms SET creator_id = NULL WHERE id = $1 AND creator_id = $2',
            [numericRoomId, user.userId]
        );

        // Check if there are any members left in the room
        const membersResult = await client.query(
            'SELECT 1 FROM room_members WHERE room_id = $1 LIMIT 1',
            [numericRoomId]
        );

        if (membersResult.rows.length === 0) {
            // If no members are left, delete the entire room.
            // Entries will be deleted automatically due to `ON DELETE CASCADE`.
            await client.query('DELETE FROM rooms WHERE id = $1', [numericRoomId]);
        }
        
        await client.query('COMMIT');
        
        return NextResponse.json({ message: 'Successfully left the room' });

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('Failed to leave room:', error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    } finally {
        client.release();
    }
}

---

--- File: src/app/api/user/rooms/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { verifyToken } from '@/lib/auth';

export async function GET(req: Request) {
    try {
        const token = req.headers.get('authorization')?.split(' ')[1];
        const user = verifyToken(token);
        if (!user) {
            return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
        }

        const roomsResult = await db.query(
            `SELECT r.id, r.code 
             FROM rooms r 
             JOIN room_members rm ON r.id = rm.room_id 
             WHERE rm.user_id = $1 
             ORDER BY r.id DESC`,
            [user.userId]
        );

        return NextResponse.json(roomsResult.rows);

    } catch (error) {
        console.error('Failed to fetch user rooms:', error);
        return NextResponse.json({ message: 'An error occurred.' }, { status: 500 });
    }
}

---

--- File: src/app/rooms/layout.tsx ---
"use client";

import RoomsSidebar from '@/components/RoomsSidebar';
import { ReactNode, useState, useEffect } from 'react';
import { usePathname } from 'next/navigation';
import { FiMenu } from 'react-icons/fi';

export default function RoomsLayout({ children }: { children: ReactNode }) {
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const pathname = usePathname();

    // Close sidebar on route change for better mobile UX
    useEffect(() => {
        if (isSidebarOpen) {
            setIsSidebarOpen(false);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [pathname]);

    return (
        <div className="h-screen flex bg-background overflow-hidden">
            {/* Overlay for mobile, appears when sidebar is open */}
            {isSidebarOpen && (
                <div
                    className="fixed inset-0 bg-black/50 z-30 md:hidden"
                    onClick={() => setIsSidebarOpen(false)}
                    aria-hidden="true"
                />
            )}

            {/* Sidebar container. Handles mobile slide-in and static desktop display. */}
            <div
                className={`fixed top-0 left-0 h-full z-40 transform transition-transform duration-300 ease-in-out md:static md:translate-x-0 md:shrink-0 bg-background ${
                    isSidebarOpen ? "translate-x-0" : "-translate-x-full"
                }`}
            >
                <RoomsSidebar closeSidebar={() => setIsSidebarOpen(false)} />
            </div>
            
            <div className="flex-1 flex flex-col overflow-hidden">
                {/* Mobile-only header */}
                <header className="md:hidden flex items-center justify-start p-2 bg-card border-b border-card-border sticky top-0 z-10">
                    <button
                        onClick={() => setIsSidebarOpen(true)}
                        className="p-2 rounded-md text-foreground"
                        aria-label="Open menu"
                    >
                        <FiMenu size={24} />
                    </button>
                </header>
                
                {/* Main content area */}
                <main className="flex-1 bg-muted p-4 sm:p-6 md:p-8 overflow-y-auto">
                    {children}
                </main>
            </div>
        </div>
    );
}

---

--- File: src/app/rooms/page.tsx ---
"use client";

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';

interface Room {
    id: number;
    code: string;
}

export default function RoomsPage() {
    const t = useTranslations('Rooms');
    const router = useRouter();
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const checkRoomsAndRedirect = async () => {
            const token = localStorage.getItem('token');
            if (!token) {
                router.replace('/'); // Use replace to avoid back-button issues
                return;
            }

            try {
                const res = await fetch('/api/user/rooms', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (res.ok) {
                    const rooms: Room[] = await res.json();
                    if (rooms && rooms.length > 0) {
                        // Redirect to the most recent room
                        router.replace(`/rooms/${rooms[0].id}`);
                    } else {
                        // No rooms, so stop loading and show the welcome message
                        setIsLoading(false);
                    }
                } else if (res.status === 401) {
                    // Unauthorized, redirect to login
                    router.replace('/');
                } else {
                    // Handle other errors, stop loading to prevent infinite loop
                    setIsLoading(false);
                }
            } catch (error) {
                console.error("Failed to fetch rooms", error);
                setIsLoading(false); // Stop loading on network or other errors
            }
        };

        checkRoomsAndRedirect();
    }, [router]);

    if (isLoading) {
        return (
            <div className="w-full h-full flex items-center justify-center">
                <div className="text-center">
                    <p className="text-muted-foreground">{t('loadingRooms')}</p>
                </div>
            </div>
        );
    }

    return (
        <div className="w-full h-full flex items-center justify-center">
            <div className="text-center bg-card p-8 rounded-lg shadow-md border border-card-border max-w-md animate-scaleIn">
                <h1 className="text-2xl font-bold text-card-foreground">
                    {t('joinOrCreateRoom')}
                </h1>
                <p className="text-muted-foreground mt-2">
                    {t('selectOrCreateRoomPrompt')}
                </p>
            </div>
        </div>
    );
}

---

--- File: src/app/rooms/[roomId]/page.tsx ---
"use client";

import { useState, useEffect, useCallback, useMemo } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { useSimplifiedLayout } from '@/components/SimplifiedLayoutProvider';
import { FiArrowDown } from 'react-icons/fi';
import { handleApi } from '@/lib/api';

interface Member {
    id: number;
    username: string;
}

export default function RoomPage() {
    const params = useParams<{ roomId: string }>();
    const { roomId } = params;
    const t = useTranslations('Room');
    const { isSimplified } = useSimplifiedLayout();

    const [amount, setAmount] = useState('');
    const [description, setDescription] = useState('');
    const [balance, setBalance] = useState(0);
    const [detailedBalance, setDetailedBalance] = useState<{ [key: string]: number }>({});
    const [showDetails, setShowDetails] = useState(false);
    const [roomCode, setRoomCode] = useState('');
    const [members, setMembers] = useState<Member[]>([]);
    const [currentUserId, setCurrentUserId] = useState<number | null>(null);
    const [selectedMemberIds, setSelectedMemberIds] = useState<Set<number>>(new Set());
    const [includeSelfInSplit, setIncludeSelfInSplit] = useState(true);
    const router = useRouter();
    
    const [entryType, setEntryType] = useState<'expense' | 'loan'>('expense');

    const otherMembers = useMemo(() => members.filter(m => m.id !== currentUserId), [members, currentUserId]);

    const fetchData = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            router.push('/');
            return;
        }
        try {
            const res = await fetch(`/api/rooms/${roomId}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (res.ok) {
                const { currentUserBalance, balances, code, members, currentUserId } = await res.json();
                setBalance(currentUserBalance || 0);
                setDetailedBalance(balances || {});
                setRoomCode(code || '');
                setMembers(members || []);
                setCurrentUserId(currentUserId || null);
                setSelectedMemberIds(new Set(members.filter((m: Member) => m.id !== currentUserId).map((m: Member) => m.id)));
                setIncludeSelfInSplit(true);
            } else if (res.status === 401) {
                router.push('/');
            }
        } catch (e) {
            console.error("Failed to fetch room data. Possibly offline.", e);
        }
    }, [roomId, router]);

    useEffect(() => {
        fetchData();
        window.addEventListener('syncdone', fetchData);
        return () => window.removeEventListener('syncdone', fetchData);
    }, [fetchData]);

    useEffect(() => {
        if (isSimplified) {
            setEntryType('loan');
        } else {
            const savedEntryType = localStorage.getItem('entryType') as 'expense' | 'loan';
            setEntryType(savedEntryType && ['expense', 'loan'].includes(savedEntryType) ? savedEntryType : 'expense');
        }
    }, [isSimplified]);

    const handleSetEntryType = (type: 'expense' | 'loan') => {
        if (isSimplified) return;
        setEntryType(type);
        localStorage.setItem('entryType', type);
    };

    const handleAddEntry = async (e: React.FormEvent) => {
        e.preventDefault();
        const parsedAmount = Math.abs(parseFloat(amount));
        if (isNaN(parsedAmount) || parsedAmount <= 0) return;

        let finalSplitWithIds: number[] | null = null;
        if (entryType === 'expense') {
            const participants = new Set(selectedMemberIds);
            if (includeSelfInSplit && currentUserId) {
                participants.add(currentUserId);
            }
            if (participants.size > 0) {
                finalSplitWithIds = Array.from(participants);
            }
        }
        
        const finalAmount = entryType === 'loan' ? -parsedAmount : parsedAmount;
        
        try {
            await handleApi({
                method: 'POST',
                url: '/api/entries',
                body: { roomId, amount: finalAmount, description, splitWithUserIds: finalSplitWithIds },
            });
            setAmount('');
            setDescription('');
            fetchData();
        } catch (error) {
            console.error("Failed to add entry:", error);
        }
    };

    const handleMemberSelection = (memberId: number) => {
        const newSelection = new Set(selectedMemberIds);
        if (newSelection.has(memberId)) {
            newSelection.delete(memberId);
        } else {
            newSelection.add(memberId);
        }
        setSelectedMemberIds(newSelection);
    };
    
    const isSubmitDisabled = entryType === 'expense' && !includeSelfInSplit && selectedMemberIds.size === 0;

    return (
        <div className="max-w-md mx-auto bg-card rounded-xl shadow-md overflow-hidden border border-card-border animate-scaleIn">
            <div className="p-8">
                <div className="text-center mb-6">
                    <h1 className="text-xl font-bold text-card-foreground">
                        {t('roomTitle', { code: roomCode })}
                    </h1>
                </div>

                <div className="text-center mb-6">
                    <div className="text-lg font-medium text-muted-foreground">{t('balanceTitle')}</div>
                    <div className={`text-4xl font-bold mt-1 ${balance >= 0 ? 'text-success' : 'text-danger'}`}>
                        {balance.toFixed(2)} ILS
                    </div>
                     <button onClick={() => setShowDetails(!showDetails)} className="text-sm text-primary hover:underline flex items-center justify-center mx-auto mt-2">
                        {t('detailed')} <FiArrowDown className={`ms-1 transition-transform rtl:me-1 ${showDetails ? 'rotate-180' : ''}`} />
                    </button>
                    {showDetails && (
                        <div className="mt-2 text-left bg-muted p-3 rounded-lg animate-fadeIn">
                            {Object.entries(detailedBalance).map(([username, bal]) => (
                                <div key={username} className="flex justify-between text-card-foreground py-1">
                                    <span>{username}:</span>
                                    <span className={bal >= 0 ? 'text-success' : 'text-danger'}>{bal.toFixed(2)}</span>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                <div className="border-t border-card-border my-6"></div>

                <div>
                    <h2 className="text-xl font-semibold text-center text-card-foreground mb-4">
                        {isSimplified ? t('simplifiedNewEntryTitle') : t('newEntryTitle')}
                    </h2>
                    <form onSubmit={handleAddEntry}>
                        {!isSimplified && (
                            <div className="mb-6">
                                <div className="relative flex w-full rounded-full bg-muted p-1">
                                    <span
                                        className={`absolute top-1 bottom-1 w-[calc(50%-4px)] rounded-full shadow-sm transition-all duration-300 ease-in-out border-2 border-black dark:border-white ${entryType === 'expense' ? 'bg-primary' : 'bg-success'}`}
                                        style={{ left: entryType === 'loan' ? '50%' : '4px' }}
                                    />
                                    <button type="button" onClick={() => handleSetEntryType('expense')} className={`z-10 w-1/2 py-2 text-sm font-semibold transition-colors duration-300 ${entryType === 'expense' ? 'text-primary-foreground' : 'text-foreground'}`}>
                                        {t('expense')}
                                    </button>
                                    <button type="button" onClick={() => handleSetEntryType('loan')} className={`z-10 w-1/2 py-2 text-sm font-semibold transition-colors duration-300 ${entryType === 'loan' ? 'text-secondary-foreground' : 'text-foreground'}`}>
                                        {t('loan')}
                                    </button>
                                </div>
                            </div>
                        )}
                        <div className="mb-4">
                            <label className="block text-muted-foreground text-sm font-bold mb-2" htmlFor="amount">{t('amount')}</label>
                            <input id="amount" type="number" value={amount} onChange={(e) => setAmount(e.target.value)} className="w-full px-3 py-2 leading-tight rounded-lg themed-input" required min="0" step="any" />
                        </div>
                        <div className="mb-4">
                            <label className="block text-muted-foreground text-sm font-bold mb-2" htmlFor="description">{t('description')}</label>
                            <input id="description" type="text" value={description} onChange={(e) => setDescription(e.target.value)} className="w-full px-3 py-2 leading-tight rounded-lg themed-input" required />
                        </div>

                        {entryType === 'expense' && !isSimplified && otherMembers.length > 0 && (
                            <div className="mb-6 bg-muted/50 p-3 rounded-lg animate-fadeIn">
                                <div className="flex justify-between items-center pb-2 border-b border-card-border mb-2">
                                     <label className="block text-muted-foreground text-sm font-bold">{t('splitWith')}</label>
                                     <div className="flex items-center">
                                         <input id="share-with-me" type="checkbox" checked={includeSelfInSplit} onChange={(e) => setIncludeSelfInSplit(e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary" />
                                         <label htmlFor="share-with-me" className="ms-2 block text-sm font-medium text-foreground">{t('shareWithMe')}</label>
                                     </div>
                                </div>
                                <div className="space-y-2 max-h-32 overflow-y-auto px-1">
                                    {otherMembers.map(member => (
                                        <div key={member.id} className="flex items-center">
                                            <input id={`member-${member.id}`} name="members" type="checkbox" checked={selectedMemberIds.has(member.id)} onChange={() => handleMemberSelection(member.id)} className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary" />
                                            <label htmlFor={`member-${member.id}`} className="ms-2 block text-sm text-foreground">{member.username}</label>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        <div className="flex items-center justify-between mt-6">
                            <button type="submit" className="font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline btn-primary disabled:opacity-50 disabled:transform-none disabled:shadow-none" disabled={isSubmitDisabled}>
                                {t('addEntry')}
                            </button>
                            <button type="button" onClick={() => router.push(`/rooms/${roomId}/entries`)} className="font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline btn-muted">
                                {t('allEntries')}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}

---

--- File: src/app/rooms/[roomId]/entries/page.tsx ---
"use client";

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useTranslations } from 'next-intl';

interface Entry {
    id: number;
    amount: string;
    description: string;
    created_at: string;
    username: string;
}

export default function EntriesPage() {
    const params = useParams<{ roomId: string }>();
    const { roomId } = params;
    const t = useTranslations('Room');
    const [entries, setEntries] = useState<Entry[]>([]);
    const router = useRouter();

    const fetchEntries = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            router.push('/');
            return;
        }
        try {
            const res = await fetch(`/api/rooms/${roomId}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (res.ok) {
                const { entries } = await res.json();
                setEntries(entries);
            } else if (res.status === 401) {
                router.push('/');
            }
        } catch (e) {
            console.error("Failed to fetch entries. Possibly offline.", e);
        }
    }, [roomId, router]);

    useEffect(() => {
        fetchEntries();
        // Add event listener for when sync completes to refetch entries
        window.addEventListener('syncdone', fetchEntries);
        return () => {
            window.removeEventListener('syncdone', fetchEntries);
        };
    }, [fetchEntries]);

    return (
        <div className="max-w-4xl mx-auto animate-scaleIn">
            <button onClick={() => router.back()} className="mb-4 font-bold py-2 px-4 rounded-lg btn-primary">
                {t('backToRoom')}
            </button>
            <div className="bg-card shadow-md rounded-lg border border-card-border">
                <div className="p-4 border-b border-card-border">
                    <h1 className="text-xl font-semibold text-card-foreground">{t('allEntries')}</h1>
                </div>
                <ul>
                    {entries.map((entry, index) => (
                        <li key={entry.id} className="p-4 border-b border-card-border flex justify-between items-center animate-fadeIn" style={{ animationDelay: `${index * 50}ms`, opacity: 0 }}>
                            <div>
                                <p className="font-semibold text-card-foreground">{entry.description}</p>
                                <p className="text-sm text-muted-foreground">
                                    {entry.username} - {new Date(entry.created_at).toLocaleString()}
                                </p>
                            </div>
                            <div className="text-lg font-bold text-card-foreground">
                                {parseFloat(entry.amount).toFixed(2)} ILS
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
}

---

--- File: src/components/ConfirmationDialog.tsx ---
// src/components/ConfirmationDialog.tsx
"use client";

import { ReactNode } from 'react';
import { useTranslations } from 'next-intl';

interface ConfirmationDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  children: ReactNode;
}

export default function ConfirmationDialog({ isOpen, onClose, onConfirm, title, children }: ConfirmationDialogProps) {
  const t = useTranslations('Dialog');
  if (!isOpen) return null;

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/60"
      aria-labelledby="confirmation-dialog-title"
      role="dialog"
      aria-modal="true"
    >
      <div 
        className="rounded-xl shadow-lg border border-card-border bg-background w-full max-w-md m-4 p-6 animate-scaleIn" 
        role="document"
      >
        <h2 id="confirmation-dialog-title" className="text-xl font-bold text-card-foreground mb-4">
          {title}
        </h2>
        <div className="text-muted-foreground mb-6">
          {children}
        </div>
        <div className="flex justify-end space-x-4 rtl:space-x-reverse">
          <button onClick={onClose} className="py-2 px-4 rounded-lg font-semibold btn-muted">
            {t('cancel')}
          </button>
          <button onClick={onConfirm} className="py-2 px-4 rounded-lg font-semibold btn-danger">
            {t('confirm')}
          </button>
        </div>
      </div>
    </div>
  );
}

---

--- File: src/components/IntlProvider.tsx ---
// src/components/IntlProvider.tsx
"use client";

import { NextIntlClientProvider } from "next-intl";
import { ReactNode, useEffect, useState, createContext, useContext, Dispatch, SetStateAction } from "react";

// Import all message files directly
import enMessages from '../../messages/en.json';
import heMessages from '../../messages/he.json';
import ruMessages from '../../messages/ru.json';

const messages = {
  en: enMessages,
  he: heMessages,
  ru: ruMessages,
};

type Messages = typeof enMessages;

// Create a context to share locale state and its setter
interface LocaleContextType {
  locale: string;
  setLocale: Dispatch<SetStateAction<string>>;
}
const LocaleContext = createContext<LocaleContextType | undefined>(undefined);

export default function IntlProvider({ children }: { children: ReactNode }) {
  const [locale, setLocale] = useState('en'); // Default to 'en'
  const [loadedMessages, setLoadedMessages] = useState<Messages>(messages.en);

  // On initial client-side render, load the locale from localStorage
  useEffect(() => {
    const storedLocale = localStorage.getItem('locale') || 'en';
    if (messages[storedLocale as keyof typeof messages]) {
      setLocale(storedLocale);
    }
  }, []);

  // When locale changes, update messages, localStorage, and document attributes
  useEffect(() => {
    if (messages[locale as keyof typeof messages]) {
      setLoadedMessages(messages[locale as keyof typeof messages]);
      localStorage.setItem('locale', locale);
      document.documentElement.lang = locale;
      document.documentElement.dir = locale === 'he' ? 'rtl' : 'ltr';
    }
  }, [locale]);

  return (
    <LocaleContext.Provider value={{ locale, setLocale }}>
      <NextIntlClientProvider
        locale={locale}
        messages={loadedMessages}
        timeZone="UTC" // Set a default timezone to prevent errors
      >
        {children}
      </NextIntlClientProvider>
    </LocaleContext.Provider>
  );
}

// Custom hook for components to easily access and change the locale
export function useLocale() {
  const context = useContext(LocaleContext);
  if (context === undefined) {
    throw new Error('useLocale must be used within an IntlProvider');
  }
  return context;
}

---

--- File: src/components/LanguageSwitcher.tsx ---
// src/components/LanguageSwitcher.tsx
"use client";

import { useState, useEffect, useRef } from 'react';
import { useLocale } from '@/components/IntlProvider';
import { FiGlobe, FiChevronDown } from 'react-icons/fi';

export default function LanguageSwitcher() {
    const { locale, setLocale } = useLocale();
    const [isOpen, setIsOpen] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);

    const languages = [
        { code: 'en', name: 'English' },
        { code: 'ru', name: 'Русский' },
        { code: 'he', name: 'עברית' },
    ];

    const currentLanguageName = languages.find(lang => lang.code === locale)?.name || 'Language';

    const handleLanguageChange = (langCode: string) => {
        setLocale(langCode);
        setIsOpen(false); // Close dropdown after selection
    };

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div className="fixed top-4 right-4 z-50" ref={dropdownRef}>
            <div className="relative">
                <button
                    onClick={() => setIsOpen(!isOpen)}
                    className="flex items-center space-x-2 bg-card border border-card-border rounded-md px-4 py-2 text-sm font-medium text-foreground hover:bg-muted focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                    <FiGlobe />
                    <span>{currentLanguageName}</span>
                    <FiChevronDown className={`transition-transform ms-1 ${isOpen ? 'rotate-180' : ''}`} />
                </button>

                {isOpen && (
                    <div
                        className="absolute right-0 mt-2 w-48 bg-card rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
                        role="menu"
                        aria-orientation="vertical"
                        aria-labelledby="menu-button"
                    >
                        <div className="py-1" role="none">
                            {languages.map(lang => (
                                <button
                                    key={lang.code}
                                    onClick={() => handleLanguageChange(lang.code)}
                                    className={`w-full text-left block px-4 py-2 text-sm ${
                                        locale === lang.code
                                            ? 'bg-primary text-primary-foreground'
                                            : 'text-foreground hover:bg-muted'
                                    }`}
                                    role="menuitem"
                                >
                                    {lang.name}
                                </button>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

---

--- File: src/components/RoomsSidebar.tsx ---
"use client";

import { useState, useEffect, useCallback } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { useTranslations } from 'next-intl';
import Link from 'next/link';
import { FiCopy, FiCheck, FiSun, FiMoon, FiGlobe, FiX, FiLogOut, FiXCircle, FiWifiOff } from 'react-icons/fi';
import Icon from '@mdi/react';
import { mdiKettle } from '@mdi/js';
import { useTheme } from '@/components/ThemeProvider';
import { useLocale } from '@/components/IntlProvider';
import { useSimplifiedLayout } from '@/components/SimplifiedLayoutProvider';
import ConfirmationDialog from './ConfirmationDialog';
import { useSync } from './SyncProvider';
import { handleApi } from '@/lib/api';

interface Room {
    id: number;
    code: string;
}

interface RoomsSidebarProps {
    closeSidebar: () => void;
}

export default function RoomsSidebar({ closeSidebar }: RoomsSidebarProps) {
    const t = useTranslations('Rooms');
    const tAccess = useTranslations('Accessibility');
    const router = useRouter();
    const pathname = usePathname();
    const [rooms, setRooms] = useState<Room[]>([]);
    const [roomCode, setRoomCode] = useState('');
    const [error, setError] = useState('');
    const [copiedCode, setCopiedCode] = useState<string | null>(null);
    const { theme, setTheme } = useTheme();
    const { locale, setLocale } = useLocale();
    const { isSimplified, setIsSimplified } = useSimplifiedLayout();
    const { isOnline } = useSync();

    const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false);
    const [selectedRoomToLeave, setSelectedRoomToLeave] = useState<Room | null>(null);

    const handleLogout = useCallback(() => {
        localStorage.removeItem('token');
        router.push('/');
    }, [router]);

    const fetchRooms = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            router.push('/');
            return;
        }
        try {
            const res = await fetch('/api/user/rooms', {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (res.ok) {
                const data = await res.json();
                setRooms(data);
            } else if (res.status === 401) {
                handleLogout();
            }
        } catch (e) {
            console.error("Could not fetch rooms, possibly offline.", e);
        }
    }, [router, handleLogout]);

    useEffect(() => {
        fetchRooms();
        window.addEventListener('syncdone', fetchRooms);
        return () => window.removeEventListener('syncdone', fetchRooms);
    }, [fetchRooms, pathname]);

    const handleCopyToClipboard = (code: string) => {
        navigator.clipboard.writeText(code).then(() => {
            setCopiedCode(code);
            setTimeout(() => setCopiedCode(null), 2000);
        }).catch(() => setError(t('copyFailed')));
    };

    const handleJoinRoom = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');

        // Client-side validation to prevent empty submissions
        if (!roomCode.trim()) {
            setError(t('joinFailed')); // Use a generic "failed" message or create a new one
            return;
        }

        try {
            const result = await handleApi({
                method: 'POST',
                url: '/api/rooms',
                body: { roomCode },
            });

            if (result?.optimistic) {
                setError("Request queued while offline.");
                return;
            }
            if (result.roomId) {
                setRoomCode('');
                router.push(`/rooms/${result.roomId}`);
                closeSidebar();
            } else {
                setError(t('joinFailed'));
            }
        } catch (err: unknown) {
            const message = err instanceof Error ? err.message : String(err);
            setError(message || t('joinFailed'));
        }
    };

    const handleCreateRoom = async () => {
        setError('');
        try {
            const result = await handleApi({
                method: 'POST',
                url: '/api/rooms',
                body: {}, // Send an empty body to signify creation
            });

            if (result?.optimistic) {
                setError("Request queued while offline.");
                return;
            }
            if (result.roomId) {
                router.push(`/rooms/${result.roomId}`);
                closeSidebar();
            } else {
                setError(t('createFailed'));
            }
        } catch (err: unknown) {
            const message = err instanceof Error ? err.message : String(err);
            setError(message || t('createFailed'));
        }
    };
    
    const openLeaveDialog = (room: Room) => {
        setSelectedRoomToLeave(room);
        setIsLeaveDialogOpen(true);
    };

    const handleLeaveRoom = async () => {
        if (!selectedRoomToLeave) return;
        setError('');
        
        const originalRooms = rooms;
        setRooms(prev => prev.filter(r => r.id !== selectedRoomToLeave!.id));
        setIsLeaveDialogOpen(false);
        if (pathname.includes(`/rooms/${selectedRoomToLeave.id}`)) {
            router.push('/rooms');
        }

        try {
            await handleApi({
                method: 'DELETE',
                url: `/api/rooms/${selectedRoomToLeave.id}/members`,
            });
        } catch (err: unknown) {
            const message = err instanceof Error ? err.message : String(err);
            setError(message || t('leaveRoomFailed'));
            setRooms(originalRooms);
        } finally {
            setSelectedRoomToLeave(null);
        }
    };

    const toggleTheme = () => setTheme(prev => (prev === 'light' ? 'dark' : 'light'));
    const cycleLanguage = () => setLocale(l => (l === 'en' ? 'ru' : l === 'ru' ? 'he' : 'en'));
    const toggleSimplifiedLayout = () => setIsSimplified(prev => !prev);

    return (
        <>
            <aside className="w-80 bg-card border-e border-card-border h-full p-4 flex flex-col">
                <div className="flex items-center justify-between mb-6 px-2">
                    <div className="flex items-center space-x-2 rtl:space-x-reverse">
                        <h2 className="text-2xl font-bold text-card-foreground">{t('myRooms')}</h2>
                        {!isOnline && <FiWifiOff className="text-danger" title="You are offline" />}
                    </div>
                    <button onClick={closeSidebar} className="md:hidden p-1 rounded-md hover:bg-muted text-muted-foreground">
                        <FiX size={24} />
                    </button>
                </div>

                <nav className="flex-grow overflow-y-auto -mx-2 pr-1 animate-fadeIn">
                    <ul>
                        {rooms.map((room, index) => {
                            const isActive = pathname === `/rooms/${room.id}` || pathname.startsWith(`/rooms/${room.id}/`);
                            return (
                                <li key={room.id} style={{ animationDelay: `${index * 50}ms`, opacity: 0 }} className="animate-fadeIn px-2">
                                    <div className={`group flex items-center justify-between rounded-lg transition-colors mb-2 ${isActive ? 'bg-primary text-primary-foreground' : 'text-card-foreground hover:bg-muted'}`}>
                                        <Link href={`/rooms/${room.id}`} className="flex-grow p-3 text-sm font-semibold truncate">
                                            Room #{room.code}
                                        </Link>
                                        <div className="flex items-center">
                                            <button onClick={() => handleCopyToClipboard(room.code)} className={`p-3 rounded-lg transition-all duration-200 ${isActive ? 'hover:bg-primary-hover' : 'hover:bg-card-border'} opacity-50 group-hover:opacity-100`} title={t('copyRoomCode')} >
                                                {copiedCode === room.code ? <FiCheck className="text-success animate-scaleIn" /> : <FiCopy className="group-hover:scale-110 transition-transform" />}
                                            </button>
                                            <button onClick={() => openLeaveDialog(room)} className={`p-3 rounded-lg transition-all duration-200 ${isActive ? 'hover:bg-primary-hover' : 'hover:bg-card-border'} opacity-50 group-hover:opacity-100`} title={t('leaveRoom')} >
                                                <FiXCircle className="group-hover:scale-110 transition-transform text-danger" />
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            );
                        })}
                    </ul>
                </nav>

                <div className="mt-auto pt-4 border-t border-card-border">
                    {error && <p className="text-danger text-sm text-center mb-2">{error}</p>}
                    
                    <form onSubmit={handleJoinRoom} className="mb-4">
                        <input type="text" placeholder={t('roomCode')} value={roomCode} onChange={(e) => setRoomCode(e.target.value)} className="w-full px-3 py-2 rounded-lg mb-2 themed-input" />
                        <button type="submit" className="w-full py-2 rounded-lg btn-primary">{t('joinRoom')}</button>
                    </form>

                    <div className="flex items-center my-2">
                        <div className="flex-grow border-t border-card-border"></div>
                        <span className="flex-shrink mx-2 text-xs text-muted-foreground">{t('or')}</span>
                        <div className="flex-grow border-t border-card-border"></div>
                    </div>
                    
                    <button onClick={handleCreateRoom} className="w-full py-2 rounded-lg btn-secondary mb-4">{t('createRoom')}</button>

                    <div className="space-y-2">
                        <button onClick={handleLogout} className="w-full py-2 px-4 flex items-center justify-center rounded-lg btn-muted" aria-label={t('logout')}>
                            <FiLogOut size={16} className="me-2"/>
                            <span className="font-semibold text-xs">{t('logout')}</span>
                        </button>

                        <div className="flex items-center justify-center space-x-2">
                             <button onClick={toggleTheme} className="flex items-center justify-center w-full p-2 rounded-md btn-muted" aria-label={tAccess('toggleTheme')} >
                                {theme === 'light' ? <FiMoon size={16} /> : <FiSun size={16} />}
                            </button>
                             <button onClick={cycleLanguage} className="flex items-center justify-center w-full p-2 rounded-md btn-muted" aria-label={tAccess('changeLanguage')} >
                                <FiGlobe size={16} className="me-1.5"/>
                                <span className="font-semibold text-xs">{locale.toUpperCase()}</span>
                            </button>
                             <button onClick={toggleSimplifiedLayout} className={`flex items-center justify-center w-full p-2 rounded-md btn-muted transition-colors ${isSimplified ? 'text-primary' : ''}`} aria-label={tAccess('toggleSimplifiedLayout')} >
                                 <Icon path={mdiKettle} size={0.75} />
                            </button>
                        </div>
                    </div>
                </div>
            </aside>

            <ConfirmationDialog isOpen={isLeaveDialogOpen} onClose={() => setIsLeaveDialogOpen(false)} onConfirm={handleLeaveRoom} title={t('leaveRoomTitle')}>
                {t('leaveRoomConfirmation', { code: selectedRoomToLeave?.code ?? '' })}
            </ConfirmationDialog>
        </>
    );
}

---

--- File: src/components/SimplifiedLayoutProvider.tsx ---
// src/components/SimplifiedLayoutProvider.tsx
"use client";

import { createContext, useContext, useEffect, useState, ReactNode, Dispatch, SetStateAction } from 'react';

type SimplifiedLayout = boolean;

interface SimplifiedLayoutContextType {
  isSimplified: SimplifiedLayout;
  setIsSimplified: Dispatch<SetStateAction<SimplifiedLayout>>;
}

const SimplifiedLayoutContext = createContext<SimplifiedLayoutContextType | undefined>(undefined);

export default function SimplifiedLayoutProvider({ children }: { children: ReactNode }) {
  const [isSimplified, setIsSimplified] = useState<SimplifiedLayout>(false);

  // On initial client-side render, load the state from localStorage
  useEffect(() => {
    const storedValue = localStorage.getItem('simplifiedLayout');
    if (storedValue) {
      setIsSimplified(JSON.parse(storedValue));
    }
  }, []);

  // When state changes, update localStorage
  useEffect(() => {
    localStorage.setItem('simplifiedLayout', JSON.stringify(isSimplified));
  }, [isSimplified]);

  return (
    <SimplifiedLayoutContext.Provider value={{ isSimplified, setIsSimplified }}>
      {children}
    </SimplifiedLayoutContext.Provider>
  );
}

export function useSimplifiedLayout() {
  const context = useContext(SimplifiedLayoutContext);
  if (context === undefined) {
    throw new Error('useSimplifiedLayout must be used within a SimplifiedLayoutProvider');
  }
  return context;
}

---

--- File: src/components/SyncProvider.tsx ---
// src/components/SyncProvider.tsx
"use client";

import { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { syncOutbox } from '@/lib/offline-sync';

interface SyncContextType {
  isOnline: boolean;
  isSyncing: boolean;
}

const SyncContext = createContext<SyncContextType | undefined>(undefined);

export default function SyncProvider({ children }: { children: ReactNode }) {
  const [isOnline, setIsOnline] = useState(true);
  const [isSyncing, setIsSyncing] = useState(false);

  useEffect(() => {
    // Set initial online status on component mount
    if (typeof window !== 'undefined' && typeof navigator !== 'undefined') {
        setIsOnline(navigator.onLine);
    }

    const handleOnline = async () => {
      console.log('Application is online.');
      setIsOnline(true);
      setIsSyncing(true);
      try {
        const success = await syncOutbox();
        if (success) {
            console.log("Sync complete. Refreshing data.");
            // Dispatch a global event that components can listen to for refetching data.
            window.dispatchEvent(new Event('syncdone'));
        }
      } catch (error) {
        console.error('Error during sync:', error);
      } finally {
        setIsSyncing(false);
      }
    };

    const handleOffline = () => {
      console.log('Application is offline.');
      setIsOnline(false);
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Initial sync check on load if online
    if (navigator.onLine) {
        handleOnline();
    }

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return (
    <SyncContext.Provider value={{ isOnline, isSyncing }}>
      {children}
    </SyncContext.Provider>
  );
}

export function useSync() {
  const context = useContext(SyncContext);
  if (context === undefined) {
    throw new Error('useSync must be used within a SyncProvider');
  }
  return context;
}

---

--- File: src/components/ThemeProvider.tsx ---
// src/components/ThemeProvider.tsx
"use client";

import { createContext, useContext, useEffect, useState, ReactNode, Dispatch, SetStateAction } from 'react';

type Theme = "light" | "dark";

interface ThemeContextType {
  theme: Theme;
  setTheme: Dispatch<SetStateAction<Theme>>;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export default function ThemeProvider({ children }: { children: ReactNode }) {
  const [theme, setTheme] = useState<Theme>('light'); // Default to 'light'

  useEffect(() => {
    const storedTheme = localStorage.getItem('theme') as Theme | null;
    if (storedTheme) {
      setTheme(storedTheme);
    }
  }, []);

  useEffect(() => {
    if (theme) {
      localStorage.setItem('theme', theme);
      document.documentElement.setAttribute('data-theme', theme);
    }
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

---

--- File: src/components/ThemeSwitcher.tsx ---
// src/components/ThemeSwitcher.tsx
"use client";

import { useTheme } from '@/components/ThemeProvider';
import { FiSun, FiMoon } from 'react-icons/fi';

export default function ThemeSwitcher() {
    const { theme, setTheme } = useTheme();

    const toggleTheme = () => {
        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
    };

    return (
        <div className="fixed top-4 left-4 z-50">
            <button
                onClick={toggleTheme}
                className="flex items-center justify-center w-12 h-12 bg-card border border-card-border rounded-md text-foreground hover:bg-muted focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                aria-label="Toggle theme"
            >
                {theme === 'light' ? <FiMoon size={20} /> : <FiSun size={20} />}
            </button>
        </div>
    );
}

---

--- File: src/lib/api.ts ---
// src/lib/api.ts
import { addToOutbox } from './offline-sync';

type HttpMethod = 'POST' | 'GET' | 'DELETE' | 'PUT';

// This interface is updated to be more specific, as you suggested.
// This is the best fix as it enforces type safety at the call site.
interface ApiRequestOptions {
    method: HttpMethod;
    url: string;
    body?: Record<string, unknown>; // More specific than 'unknown'
}

class ApiError extends Error {
    status: number;
    constructor(message: string, status: number) {
        super(message);
        this.status = status;
    }
}

export async function handleApi(options: ApiRequestOptions) {
    const { method, url, body } = options;
    const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;

    try {
        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json',
                ...(token && { 'Authorization': `Bearer ${token}` }),
            },
            ...(body && { body: JSON.stringify(body) }),
        });

        if (response.ok) {
            if (response.status === 204 || response.headers.get("content-length") === "0") {
                return { success: true };
            }
            return response.json();
        }

        const errorData = await response.json().catch(() => ({ message: 'API Error' }));
        throw new ApiError(errorData.message, response.status);

    } catch (error: unknown) {
        const isNetworkError = error instanceof TypeError && error.message === 'Failed to fetch';
        
        if (!navigator.onLine || isNetworkError) {
             if (method !== 'GET') {
                console.log('Offline or network error. Adding request to outbox.');
                await addToOutbox({ url, method, body, token });
                
                // This now works perfectly because TypeScript knows 'body' is a spreadable object or undefined.
                return {
                    ...(body || {}),
                    optimistic: true,
                };
            }
        }
        
        throw error;
    }
}

---

--- File: src/lib/auth.ts ---
import { verify } from 'jsonwebtoken';
import { JWT_SECRET } from './constants';

interface UserPayload {
    userId: number;
    username: string;
}

export function verifyToken(token: string | undefined): UserPayload | null {
    if (!token) {
        return null;
    }
    try {
        const decoded = verify(token, JWT_SECRET!) as UserPayload;
        return decoded;
    } catch { // The unused 'error' variable is removed here
        return null;
    }
}

---

--- File: src/lib/constants.ts ---
export const POSTGRES_URL = process.env.POSTGRES_URL;
export const JWT_SECRET = process.env.JWT_SECRET;

---

--- File: src/lib/db.ts ---
import { Pool } from 'pg';
import { POSTGRES_URL } from './constants';

export const db = new Pool({
    connectionString: POSTGRES_URL,
});

---

--- File: src/lib/offline-sync.ts ---
// src/lib/offline-sync.ts
import { openDB, DBSchema, IDBPDatabase } from 'idb';

const DB_NAME = 'loan-calculator-db';
const DB_VERSION = 1;
const OUTBOX_STORE = 'outbox';

type HttpMethod = 'POST' | 'DELETE' | 'PUT';

interface OutboxRequest {
    id: string;
    url: string;
    method: HttpMethod;
    body: unknown; // Changed from 'any' to 'unknown'
    timestamp: number;
    token: string | null;
}

interface OfflineDB extends DBSchema {
  [OUTBOX_STORE]: {
    key: string;
    value: OutboxRequest;
  };
}

let dbPromise: Promise<IDBPDatabase<OfflineDB>> | null = null;

function getDb(): Promise<IDBPDatabase<OfflineDB>> {
    if (!dbPromise) {
        dbPromise = openDB<OfflineDB>(DB_NAME, DB_VERSION, {
            upgrade(db) {
                if (!db.objectStoreNames.contains(OUTBOX_STORE)) {
                    db.createObjectStore(OUTBOX_STORE, { keyPath: 'id' });
                }
            },
        });
    }
    return dbPromise;
}

export async function addToOutbox(request: Omit<OutboxRequest, 'id' | 'timestamp'> & { id?: string }) {
    const db = await getDb();
    const tx = db.transaction(OUTBOX_STORE, 'readwrite');
    const outboxRequest: OutboxRequest = {
        ...request,
        id: request.id || crypto.randomUUID(),
        timestamp: Date.now()
    };
    await tx.store.add(outboxRequest);
    await tx.done;
    console.log('Request added to outbox:', outboxRequest);
    return outboxRequest;
}

export async function syncOutbox(): Promise<boolean> {
    const db = await getDb();
    const requests = await db.getAll(OUTBOX_STORE);
    if (requests.length === 0) {
        return true;
    }

    console.log(`Syncing ${requests.length} requests from outbox...`);
    
    requests.sort((a, b) => a.timestamp - b.timestamp);

    let allSucceeded = true;

    for (const req of requests) {
        try {
            const response = await fetch(req.url, {
                method: req.method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${req.token}`,
                },
                body: JSON.stringify(req.body),
            });

            if (response.ok || (response.status >= 400 && response.status < 500)) {
                await db.delete(OUTBOX_STORE, req.id);
                console.log(`Request ${req.id} synced and removed from outbox.`);
            } else {
                 console.warn(`Request ${req.id} failed with status ${response.status}. Will retry later.`);
                 allSucceeded = false;
            }
        } catch (error) {
            console.error(`Network error syncing request ${req.id}. Will retry later.`, error);
            allSucceeded = false;
            break;
        }
    }

    return allSucceeded;
}

---

