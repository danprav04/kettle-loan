name: Deploy Loan App (Development)

on:
  push:
    branches:
      - development

env:
  REGISTRY: ghcr.io
  CONTAINER_NAME: "loan-app-service-dev" # Unique name for the development container and service
  HOST_PORT: 3001 # Different port to avoid conflict with production
  CONTAINER_PORT: 3000 # Port the app listens on inside the container
  SERVER_ENV_FILE_PATH: /etc/loan-app-service-dev/.env # Unique path for the dev .env file

jobs:
  build-and-push-image:
    name: Build and Push Development Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image_uri: ${{ steps.get-primary-tag.outputs.primary_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name components
        run: |
          echo "IMAGE_OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE_REPO_NAME_LC=loan-calculator-app" >> $GITHUB_ENV
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER_LC }}/${{ env.IMAGE_REPO_NAME_LC }}
          tags: |
            type=sha,prefix=dev-,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./loan-calculator-app
          file: ./loan-calculator-app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get primary image tag
        id: get-primary-tag
        run: |
          PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "primary_tag=$PRIMARY_TAG" >> $GITHUB_OUTPUT
        shell: bash

  deploy-to-server:
    name: Deploy to Development on Server
    runs-on: ubuntu-latest
    needs: build-and-push-image
    # Use a 'development' environment for separate secrets and protection rules
    environment: development

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Assumes same SSH key, can be different

      - name: Deploy via SSH
        env:
          TARGET_SSH_HOST: ${{ secrets.SSH_HOST }} # Assumes same host, can be different
          TARGET_SSH_USER: ubuntu
          FULL_IMAGE_URI: ${{ needs.build-and-push-image.outputs.image_uri }}
          GHCR_PULL_TOKEN: ${{ secrets.GHCR_PULL_TOKEN }}
          GHCR_USERNAME: ${{ github.repository_owner }}
          # Use development-specific secrets
          DEV_POSTGRES_URL: ${{ secrets.DEV_POSTGRES_URL }}
          DEV_JWT_SECRET: ${{ secrets.DEV_JWT_SECRET }}
        run: |
          ssh-keyscan -H "${TARGET_SSH_HOST}" >> ~/.ssh/known_hosts

          ssh -o StrictHostKeyChecking=no "${TARGET_SSH_USER}@${TARGET_SSH_HOST}" << EOF
            set -ex

            # Create the directory for the .env file
            sudo mkdir -p $(dirname "${{ env.SERVER_ENV_FILE_PATH }}")

            # Create the .env file on the server with dev variables
            echo "POSTGRES_URL=${DEV_POSTGRES_URL}" | sudo tee "${{ env.SERVER_ENV_FILE_PATH }}" > /dev/null
            echo "JWT_SECRET=${DEV_JWT_SECRET}" | sudo tee -a "${{ env.SERVER_ENV_FILE_PATH }}" > /dev/null
            sudo chown root:root "${{ env.SERVER_ENV_FILE_PATH }}"
            sudo chmod 600 "${{ env.SERVER_ENV_FILE_PATH }}"

            # Log in to GitHub Container Registry
            echo "${GHCR_PULL_TOKEN}" | sudo docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

            # Create the unique systemd service file for development
            echo "[Unit]" | sudo tee "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "Description=${{ env.CONTAINER_NAME }} Docker Container" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "Requires=docker.service" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "After=docker.service network.target" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "[Service]" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "Restart=always" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "RestartSec=10" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "ExecStartPre=-/usr/bin/docker stop ${{ env.CONTAINER_NAME }}" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "ExecStartPre=-/usr/bin/docker rm ${{ env.CONTAINER_NAME }}" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "ExecStartPre=/usr/bin/docker pull ${FULL_IMAGE_URI}" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "ExecStart=/usr/bin/docker run --rm --name ${{ env.CONTAINER_NAME }} --add-host=host.docker.internal:host-gateway -p \"${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }}\" --env-file \"${{ env.SERVER_ENV_FILE_PATH }}\" ${FULL_IMAGE_URI}" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "ExecStop=/usr/bin/docker stop ${{ env.CONTAINER_NAME }}" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "[Install]" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"
            echo "WantedBy=multi-user.target" | sudo tee -a "/etc/systemd/system/${{ env.CONTAINER_NAME }}.service"

            # Reload systemd, enable and restart the new development service
            sudo systemctl daemon-reload
            sudo systemctl enable "${{ env.CONTAINER_NAME }}.service"
            sudo systemctl restart "${{ env.CONTAINER_NAME }}.service"

            echo "Deployment of ${{ env.CONTAINER_NAME }} finished successfully."
          EOF
        shell: bash